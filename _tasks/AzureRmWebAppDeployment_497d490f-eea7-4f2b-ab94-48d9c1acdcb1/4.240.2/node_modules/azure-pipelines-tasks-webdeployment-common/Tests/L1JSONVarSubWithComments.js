"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.runL1JSONVarSubWithCommentsTests = void 0;
const fs = require("fs");
const path = require("path");
const assert = require("assert");
const jsonvariablesubstitutionutility_1 = require("../jsonvariablesubstitutionutility");
function runL1JSONVarSubWithCommentsTests() {
    it("Should substitute variables in JSON with comments", (done) => {
        const envVarObject = jsonvariablesubstitutionutility_1.createEnvTree([
            { name: 'dataSourceBindings.0.target', value: 'AppServiceName', secret: false },
            { name: 'name', value: 'App Service Deploy', secret: false },
            { name: 'Hello.World', value: 'Hello World', secret: false },
            { name: 'dataSourceBindings.1.parameters.WebAppName', value: 'App Service Name params', secret: false },
            { name: 'messages.Invalidwebapppackageorfolderpathprovided', value: 'Invalidwebapppackageorfolderpathprovided', secret: true }
        ]);
        const fileContent = fs.readFileSync(path.join(__dirname, 'L1JSONVarSub', 'JSONWithComments.json'), 'utf-8');
        const jsonContent = jsonvariablesubstitutionutility_1.stripJsonComments(fileContent);
        const jsonObject = JSON.parse(jsonContent);
        jsonvariablesubstitutionutility_1.substituteJsonVariable(jsonObject, envVarObject);
        assert.strictEqual(jsonObject['dataSourceBindings']['0']['target'], 'AppServiceName', 'Should have substituted target variable');
        assert.strictEqual(jsonObject['name'], 'App Service Deploy', 'Should have substituted name variable');
        assert.strictEqual(jsonObject['Hello']['World'], 'Hello World', 'Should have substituted Hello.World variable');
        assert.strictEqual(jsonObject['dataSourceBindings']['1']['parameters']['WebAppName'], 'App Service Name params', 'Should have substituted WebAppName variable');
        assert.strictEqual(jsonObject['messages']['Invalidwebapppackageorfolderpathprovided'], 'Invalidwebapppackageorfolderpathprovided', 'Should have substituted Invalidwebapppackageorfolderpathprovided variable');
        done();
    });
    it("Should throw exception for invalid JSON with comments", (done) => {
        const fileContent = fs.readFileSync(path.join(__dirname, 'L1JSONVarSub', 'InvalidJSONWithComments.json'), 'utf-8');
        const jsonContent = jsonvariablesubstitutionutility_1.stripJsonComments(fileContent);
        assert.throws(() => JSON.parse(jsonContent), "Parse is expected to throw an error");
        done();
    });
}
exports.runL1JSONVarSubWithCommentsTests = runL1JSONVarSubWithCommentsTests;
