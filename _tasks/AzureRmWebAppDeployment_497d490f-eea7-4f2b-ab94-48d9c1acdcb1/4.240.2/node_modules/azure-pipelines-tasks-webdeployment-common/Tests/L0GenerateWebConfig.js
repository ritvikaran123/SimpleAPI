"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runGenerateWebCongigTests = void 0;
const assert = require("assert");
const mockery = require("mockery");
function runGenerateWebCongigTests() {
    let webConfigContents;
    before(() => {
        mockery.registerMock('azure-pipelines-task-lib/task', {
            writeFile: function (_file, data, _options) {
                console.log("web.config contents: " + data);
                webConfigContents = data;
            },
            debug: function (message) {
                console.log("##[debug]: " + message);
            }
        });
        mockery.registerMock('fs', {
            readFileSync: function (_path, _format) {
                return "{NodeStartFile};{Handler}";
            }
        });
        mockery.registerAllowable("../webconfigutil");
        mockery.enable({
            useCleanCache: true,
            warnOnReplace: false,
            warnOnUnregistered: false
        });
    });
    after(() => {
        mockery.disable();
    });
    beforeEach(() => {
        webConfigContents = "";
    });
    it("Should replace substitution parameters", () => __awaiter(this, void 0, void 0, function* () {
        const util = yield Promise.resolve().then(() => require("../webconfigutil"));
        const parameters = {
            NodeStartFile: "server.js",
            Handler: "iisnode"
        };
        util.generateWebConfigFile("web.config", "node", parameters);
        assert.strictEqual(webConfigContents, "server.js;iisnode");
    }));
}
exports.runGenerateWebCongigTests = runGenerateWebCongigTests;
