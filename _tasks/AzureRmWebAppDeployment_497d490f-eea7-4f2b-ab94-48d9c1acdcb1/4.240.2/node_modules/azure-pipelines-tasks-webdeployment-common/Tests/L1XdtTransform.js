"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.runL1XdtTransformTests = void 0;
const tl = require("azure-pipelines-task-lib");
const assert = require("assert");
const fs = require("fs");
const path = require("path");
const ltx = require("ltx");
const xdttransformationutility_1 = require("../xdttransformationutility");
const fileencoding_1 = require("../fileencoding");
function runL1XdtTransformTests() {
    this.timeout(parseInt(process.env.TASK_TEST_TIMEOUT) || 20000);
    beforeEach(done => {
        tl.cp(getAbsolutePath('Web.config'), getAbsolutePath('Web_test.config'), '-f', false);
        done();
    });
    afterEach(done => {
        try {
            tl.rmRF(getAbsolutePath('Web_test.config'));
        }
        catch (error) {
            tl.debug(error);
        }
        finally {
            done();
        }
    });
    it('Runs successfully with XML Transformation (L1)', function (done) {
        if (tl.getPlatform() !== tl.Platform.Windows) {
            this.skip();
        }
        xdttransformationutility_1.applyXdtTransformation(getAbsolutePath('Web_test.config'), getAbsolutePath('Web.Debug.config'));
        const resultFile = readXmlFile(getAbsolutePath('Web_test.config'));
        const expectFile = readXmlFile(getAbsolutePath('Web_Expected.config'));
        assert(ltx.equal(resultFile, expectFile), 'Should Transform attributes on Web.config');
        done();
    });
    function getAbsolutePath(file) {
        return path.join(__dirname, 'L1XdtTransform', file);
    }
    function readXmlFile(path) {
        const buffer = fs.readFileSync(path);
        const encoding = fileencoding_1.detectFileEncoding(path, buffer)[0].toString();
        const xml = buffer.toString(encoding).replace(/(?<!\r)[\n]+/gm, "\r\n");
        return ltx.parse(xml);
    }
}
exports.runL1XdtTransformTests = runL1XdtTransformTests;
