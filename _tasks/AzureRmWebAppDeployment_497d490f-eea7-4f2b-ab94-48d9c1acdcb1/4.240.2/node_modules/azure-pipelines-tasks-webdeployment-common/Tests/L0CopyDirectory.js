"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runCopyDirectoryTests = void 0;
const assert = require("assert");
const mockery = require("mockery");
const path = require("path");
function runCopyDirectoryTests() {
    const fileList = [];
    let mkdirPCount;
    let cpfilesCount;
    before(() => __awaiter(this, void 0, void 0, function* () {
        const taskLibMock = {
            exist: function (path) {
                console.log("exist : " + path);
                return fileList.map(f => f.path).indexOf(path) !== -1;
            },
            find: function (path) {
                console.log("find : " + path);
                return fileList.map(f => f.path).filter(f => f.startsWith(path));
            },
            mkdirP: function (path) {
                if (fileList.filter(f => f.isDirectory).map(f => f.path).indexOf(path) !== -1) {
                    return;
                }
                mkdirPCount++;
                fileList.push({
                    path: path,
                    isDirectory: true
                });
                console.log("mkdirp : " + path);
            },
            cp: function (source, dest, _options, _continueOnError) {
                const files = fileList.filter(f => !f.isDirectory).map(f => f.path);
                if (files.indexOf(source) === -1) {
                    return;
                }
                if (files.indexOf(dest) !== -1) {
                    return;
                }
                cpfilesCount++;
                fileList.push({
                    path: dest,
                    isDirectory: false
                });
                console.log('cp ' + source + ' to ' + dest);
            },
            stats: function (path) {
                return {
                    isDirectory: function () {
                        return fileList.some(f => f.path === path && f.isDirectory);
                    }
                };
            },
            debug: function (message) {
                console.log(message);
            }
        };
        mockery.registerMock('azure-pipelines-task-lib/task', taskLibMock);
        mockery.registerMock('./packageUtility', {});
        mockery.registerMock('./ziputility', {});
        mockery.registerAllowable('../utility');
        mockery.enable({
            useCleanCache: true,
            warnOnReplace: false,
            warnOnUnregistered: false
        });
    }));
    after(() => {
        mockery.disable();
    });
    beforeEach(() => {
        mkdirPCount = 0;
        cpfilesCount = 0;
        fileList.splice(0);
    });
    it("Should copy files and folders as expected", () => __awaiter(this, void 0, void 0, function* () {
        fileList.push({ path: path.join("C:", "source", "path"), isDirectory: true }, { path: path.join("C:", "source", "path", "myfile.txt"), isDirectory: false }, { path: path.join("C:", "source", "path", "New Folder"), isDirectory: true }, { path: path.join("C:", "source", "path", "New Folder", "Another New Folder"), isDirectory: true }, { path: path.join("C:", "source", "New Folder", "anotherfile.py"), isDirectory: false }, { path: path.join("C:", "source", "New Folder", "Another New Folder", "mynewfile.txt"), isDirectory: false });
        const utility = yield Promise.resolve().then(() => require('../utility'));
        utility.copyDirectory(path.join('C:', 'source'), path.join('C:', 'destination'));
        assert.strictEqual(cpfilesCount, 3, 'Should create three files');
        assert.strictEqual(mkdirPCount, 6, 'Should create six folder including destination folder');
    }));
}
exports.runCopyDirectoryTests = runCopyDirectoryTests;
