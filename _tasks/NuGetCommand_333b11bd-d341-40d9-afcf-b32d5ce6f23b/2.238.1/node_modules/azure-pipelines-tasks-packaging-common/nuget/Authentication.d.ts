export interface IPackageSourceBase {
    feedName: string;
    feedUri: string;
}
export interface IPackageSource extends IPackageSourceBase {
    isInternal: boolean;
}
export declare const NuGetOrgV2PackageSource: IPackageSource;
export declare const NuGetOrgV3PackageSource: IPackageSource;
export declare class NuGetAuthInfo {
    uriPrefixes: string[];
    accessToken: string;
    constructor(uriPrefixes: string[], accessToken: string);
}
export declare class NuGetExtendedAuthInfo {
    internalAuthInfo: InternalAuthInfo;
    externalAuthInfo?: ExternalAuthInfo[];
    constructor(internalAuthInfo: InternalAuthInfo, externalAuthInfo?: ExternalAuthInfo[]);
}
export declare class InternalAuthInfo {
    uriPrefixes: string[];
    accessToken: string;
    useCredProvider: string;
    useCredConfig: boolean;
    constructor(uriPrefixes: string[], accessToken: string, useCredProvider: string, useCredConfig: boolean);
}
export declare class ExternalAuthInfo {
    packageSource: IPackageSource;
    authType: ExternalAuthType;
    constructor(packageSource: IPackageSource, authType: ExternalAuthType);
}
export declare class TokenExternalAuthInfo extends ExternalAuthInfo {
    packageSource: IPackageSource;
    token: string;
    constructor(packageSource: IPackageSource, token: string);
}
export declare class UsernamePasswordExternalAuthInfo extends ExternalAuthInfo {
    packageSource: IPackageSource;
    username: string;
    password: string;
    constructor(packageSource: IPackageSource, username: string, password: string);
}
export declare class ApiKeyExternalAuthInfo extends ExternalAuthInfo {
    packageSource: IPackageSource;
    apiKey: string;
    constructor(packageSource: IPackageSource, apiKey: string);
}
export declare enum ExternalAuthType {
    Token = 0,
    UsernamePassword = 1,
    ApiKey = 2
}
