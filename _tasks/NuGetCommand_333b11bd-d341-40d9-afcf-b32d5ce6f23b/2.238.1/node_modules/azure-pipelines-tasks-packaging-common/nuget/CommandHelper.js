"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isWindowsAgent = exports.isOnPremisesTfs = exports.locateTool = exports.GetExternalAuthInfoArray = void 0;
const path = require("path");
const tl = require("azure-pipelines-task-lib/task");
const auth = require("./Authentication");
const url = require("url");
function GetExternalAuthInfoArray(inputKey) {
    let externalAuthArray = [];
    let endpointNames = tl.getDelimitedInput(inputKey, ',');
    if (!endpointNames || endpointNames.length === 0) {
        return externalAuthArray;
    }
    endpointNames.forEach((endpointName) => {
        let feedUri = tl.getEndpointUrl(endpointName, false);
        let feedName = feedUri.replace(/\W/g, '');
        let externalAuth = tl.getEndpointAuthorization(endpointName, true);
        let scheme = tl.getEndpointAuthorizationScheme(endpointName, true).toLowerCase();
        switch (scheme) {
            case "token":
                let token = externalAuth.parameters["apitoken"];
                tl.debug("adding token auth entry for feed " + feedUri);
                externalAuthArray.push(new auth.TokenExternalAuthInfo({
                    feedName: feedName,
                    feedUri: feedUri
                }, token));
                break;
            case "usernamepassword":
                let username = externalAuth.parameters["username"];
                let password = externalAuth.parameters["password"];
                tl.debug("adding password auth entry for feed " + feedUri);
                externalAuthArray.push(new auth.UsernamePasswordExternalAuthInfo({
                    feedName: feedName,
                    feedUri: feedUri
                }, username, password));
                break;
            case "none":
                let apiKey = externalAuth.parameters["nugetkey"];
                tl.debug("adding apikey auth entry for feed " + feedUri);
                externalAuthArray.push(new auth.ApiKeyExternalAuthInfo({
                    feedName: feedName,
                    feedUri: feedUri
                }, apiKey));
                break;
            default:
                break;
        }
    });
    return externalAuthArray;
}
exports.GetExternalAuthInfoArray = GetExternalAuthInfoArray;
function locateTool(tool, opts) {
    const defaultSearchPath = [""];
    const defaultAgentRoot = tl.getVariable("Agent.HomeDirectory");
    opts = opts || {};
    opts.toolFilenames = opts.toolFilenames || [tool];
    let searchPath = opts.searchPath || defaultSearchPath;
    let agentRoot = opts.root || defaultAgentRoot;
    tl.debug(`looking for tool ${tool}`);
    for (let thisVariant of opts.toolFilenames) {
        tl.debug(`looking for tool variant ${thisVariant}`);
        for (let possibleLocation of searchPath) {
            let fullPath = path.join(agentRoot, possibleLocation, thisVariant);
            tl.debug(`checking ${fullPath}`);
            if (tl.exist(fullPath)) {
                return fullPath;
            }
        }
        if (opts.fallbackToSystemPath) {
            tl.debug("Checking system path");
            let whichResult = tl.which(thisVariant);
            if (whichResult) {
                tl.debug(`found ${whichResult}`);
                return whichResult;
            }
        }
        tl.debug("not found");
    }
    return null;
}
exports.locateTool = locateTool;
function isOnPremisesTfs() {
    if (tl.getVariable("NuGetTasks.IsHostedTestEnvironment") === "true") {
        return false;
    }
    const serverType = tl.getVariable("System.ServerType");
    if (serverType) {
        return serverType.toLowerCase() !== "hosted";
    }
    else {
        // Placed here as fallback in case the variable above is not defined
        // not an ideal way to detect hosted, but there isn't a variable for it, and
        // we can't make network calls from here due to proxy issues.
        const collectionUri = tl.getVariable("System.TeamFoundationCollectionUri");
        const parsedCollectionUri = url.parse(collectionUri);
        return !(/\.visualstudio\.com$/i.test(parsedCollectionUri.hostname));
    }
}
exports.isOnPremisesTfs = isOnPremisesTfs;
function isWindowsAgent() {
    return tl.osType() === 'Windows_NT';
}
exports.isWindowsAgent = isWindowsAgent;
