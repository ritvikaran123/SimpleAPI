"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.runClientTool = exports.getClientToolOptions = void 0;
let fs = require("fs");
let os = require("os");
const tl = require("azure-pipelines-task-lib");
const child = require("child_process");
function getClientToolOptions() {
    let result = {
        cwd: process.cwd(),
        silent: false,
        failOnStdErr: false,
        ignoreReturnCode: false,
        windowsVerbatimArguments: false
    };
    result.outStream = process.stdout;
    result.errStream = process.stderr;
    return result;
}
exports.getClientToolOptions = getClientToolOptions;
function getCommandString(toolPath, command) {
    let cmd = toolPath;
    command.forEach((a) => {
        cmd += ` ${a}`;
    });
    return cmd;
}
function runClientTool(clientToolPath, command, execOptions) {
    if (tl.osType() === "Windows_NT" || clientToolPath.trim().toLowerCase().endsWith(".exe")) {
        return tl.execSync(clientToolPath, command, execOptions);
    }
    else {
        fs.chmodSync(clientToolPath, "755");
        if (!execOptions.silent) {
            execOptions.outStream.write(getCommandString(clientToolPath, command) + os.EOL);
        }
        let result = child.spawnSync(clientToolPath, command, execOptions);
        if (!execOptions.silent && result.stdout && result.stdout.length > 0) {
            execOptions.outStream.write(result.stdout);
        }
        if (!execOptions.silent && result.stderr && result.stderr.length > 0) {
            execOptions.errStream.write(result.stderr);
        }
        let res = { code: result.status, error: result.error };
        res.stdout = (result.stdout) ? result.stdout.toString() : null;
        res.stderr = (result.stderr) ? result.stderr.toString() : null;
        return res;
    }
}
exports.runClientTool = runClientTool;
