/// <reference types="node" />
import VersionInfoVersion from "./VersionInfoVersion";
export interface RawVsFixedFileInfo {
    signature: number;
    structVersion: number;
    fileVersionMS: number;
    fileVersionLS: number;
    productVersionMS: number;
    productVersionLS: number;
    fileFlagsMask: number;
    fileFlags: number;
    fileOS: number;
    fileType: number;
    fileSubtype: number;
    fileDateMS: number;
    fileDateLS: number;
}
export interface RawVsVersionInfoElement {
    header: RawVsVersionInfoElementHeader;
    rawChildren: RawVsVersionInfoElement[];
}
export interface RawVsVersionInfoElementHeader {
    length: number;
    valueLength: number;
    type: number;
    key: string;
    /** Offset from the beginning of the version resource to the beginning of this header */
    offset: number;
    /** Offset from the beginning of the version resource to the Value field of this element */
    valueOffset: number;
    /** Offset from the beginning of the version resource to the Children field of this element */
    childrenOffset: number;
}
export interface VersionStrings {
    [key: string]: string;
    Comments?: string;
    CompanyName?: string;
    FileDescription?: string;
    FileVersion?: string;
    InternalName?: string;
    LegalCopyright?: string;
    LegalTrademarks?: string;
    OriginalFilename?: string;
    PrivateBuild?: string;
    ProductName?: string;
    ProductVersion?: string;
    SpecialBuild?: string;
}
export interface VersionInfo {
    fileVersion?: VersionInfoVersion;
    productVersion?: VersionInfoVersion;
    strings: VersionStrings;
}
export declare class VersionResource {
    versionInfo: VersionInfo;
    rawVersionInfoTree: RawVsVersionInfoElement;
    constructor(buffer: Buffer);
}
export default VersionResource;
