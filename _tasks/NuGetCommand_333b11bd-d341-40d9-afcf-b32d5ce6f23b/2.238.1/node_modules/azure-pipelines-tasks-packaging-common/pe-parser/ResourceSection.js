"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResourceSection = exports.ResourceDirectory = void 0;
const resourceDirectoryTableHeaderSize = 16;
const resourceDirectoryEntrySize = 8;
const resourceDataEntryLength = 16;
var ResourceDirectoryEntryIdType;
(function (ResourceDirectoryEntryIdType) {
    ResourceDirectoryEntryIdType[ResourceDirectoryEntryIdType["NAME"] = 0] = "NAME";
    ResourceDirectoryEntryIdType[ResourceDirectoryEntryIdType["ID"] = 1] = "ID";
})(ResourceDirectoryEntryIdType || (ResourceDirectoryEntryIdType = {}));
;
class ResourceDirectory {
    constructor() {
        this.entries = [];
    }
    getDataEntry(id) {
        const entry = this.entries.find(x => x.id === id && !(x.data instanceof ResourceDirectory));
        if (!entry) {
            return undefined;
        }
        return entry.data;
    }
    getSubdirectory(id) {
        const entry = this.entries.find(x => x.id === id && x.data instanceof ResourceDirectory);
        if (!entry) {
            return undefined;
        }
        return entry.data;
    }
}
exports.ResourceDirectory = ResourceDirectory;
function readRawResourceDirectoryTableHeader(file, buffer, filePosition) {
    return __awaiter(this, void 0, void 0, function* () {
        yield file.readAsync(buffer, 0, resourceDirectoryTableHeaderSize, filePosition);
        return {
            characteristics: buffer.readUInt32LE(0),
            timeDateStamp: buffer.readUInt32LE(4),
            majorVersion: buffer.readUInt16LE(8),
            minorVersion: buffer.readUInt16LE(10),
            numberOfNameEntries: buffer.readUInt16LE(12),
            numberOfIdEntries: buffer.readUInt16LE(14),
        };
    });
}
function readRawResourceDirectoryEntry(file, buffer, filePosition, idType) {
    return __awaiter(this, void 0, void 0, function* () {
        yield file.readAsync(buffer, 0, resourceDirectoryEntrySize, filePosition);
        let idField = buffer.readUInt32LE(0);
        let offsetField = buffer.readUInt32LE(4);
        // JS acts as if all integers are signed, except for the >>> operator.
        let offsetIsSubdirectory = (offsetField >>> 31) === 1; // tslint:disable-line:no-bitwise
        let offsetValue = offsetField & 0x7FFFFFFF; // tslint:disable-line:no-bitwise
        return {
            nameOffset: idType === ResourceDirectoryEntryIdType.NAME ? idField : undefined,
            integerId: idType === ResourceDirectoryEntryIdType.ID ? idField : undefined,
            dataEntryOffset: !offsetIsSubdirectory ? offsetValue : undefined,
            subdirectoryOffset: offsetIsSubdirectory ? offsetValue : undefined,
            rawOffsetValue: offsetField,
        };
    });
}
function readRawResourceDirectoryTable(file, buffer, filePosition) {
    return __awaiter(this, void 0, void 0, function* () {
        let header = yield readRawResourceDirectoryTableHeader(file, buffer, filePosition);
        let entryOffset = filePosition + resourceDirectoryTableHeaderSize;
        let entries = [];
        for (let i = 0; i < header.numberOfNameEntries; ++i) {
            entries.push(yield readRawResourceDirectoryEntry(file, buffer, entryOffset, ResourceDirectoryEntryIdType.NAME));
            entryOffset += resourceDirectoryEntrySize;
        }
        for (let i = 0; i < header.numberOfIdEntries; ++i) {
            entries.push(yield readRawResourceDirectoryEntry(file, buffer, entryOffset, ResourceDirectoryEntryIdType.ID));
            entryOffset += resourceDirectoryEntrySize;
        }
        return { header, entries };
    });
}
function readResourceDirectoryString(file, buffer, filePosition) {
    return __awaiter(this, void 0, void 0, function* () {
        yield file.readAsync(buffer, 0, 2, filePosition);
        let length = buffer.readUInt16LE(0);
        yield file.readAsync(buffer, 0, length, filePosition + 2);
        return buffer.toString("utf16le", 0, length);
    });
}
function readResourceData(file, buffer, filePosition) {
    return __awaiter(this, void 0, void 0, function* () {
        yield file.readAsync(buffer, 0, resourceDataEntryLength, filePosition);
        return {
            dataRva: buffer.readUInt32LE(0),
            size: buffer.readUInt32LE(4),
            codepage: buffer.readUInt32LE(8),
        };
    });
}
function readResourceDirectoryTable(file, buffer, resourceDirectoryFilePosition) {
    return __awaiter(this, void 0, void 0, function* () {
        let root = new ResourceDirectory();
        let queue = [{ rva: 0, directory: root }];
        for (let current = queue.pop(); current !== undefined; current = queue.pop()) {
            let raw = yield readRawResourceDirectoryTable(file, buffer, resourceDirectoryFilePosition + current.rva);
            for (let entry of raw.entries) {
                let id;
                if (entry.integerId !== undefined) {
                    id = entry.integerId;
                }
                else {
                    id = yield readResourceDirectoryString(file, buffer, resourceDirectoryFilePosition + entry.nameOffset);
                }
                let data;
                if (entry.dataEntryOffset) {
                    data = yield readResourceData(file, buffer, resourceDirectoryFilePosition + entry.dataEntryOffset);
                }
                else {
                    let subdirectory = new ResourceDirectory();
                    data = subdirectory;
                    queue.push({ rva: entry.subdirectoryOffset, directory: subdirectory });
                }
                current.directory.entries.push({ id, data });
            }
        }
        return root;
    });
}
class ResourceSection {
    constructor(root, file, sectionTableEntry) {
        this.root = root;
        this.file = file;
        this.sectionTableEntry = sectionTableEntry;
    }
    static load(file, resourceSectionTableEntry) {
        return __awaiter(this, void 0, void 0, function* () {
            const buffer = new Buffer(1024);
            buffer.fill(0);
            const root = yield readResourceDirectoryTable(file, buffer, resourceSectionTableEntry.pointerToRawData);
            return new ResourceSection(root, file, resourceSectionTableEntry);
        });
    }
    getResource() {
        const path = arguments;
        let current = this.root;
        // stop one before the end, need to treat it specially.
        let i;
        for (i = 0; i < path.length - 1; ++i) {
            current = current.getSubdirectory(path[i]);
            if (current === undefined) {
                return undefined;
            }
        }
        return current.getDataEntry(path[i]);
    }
    getResourceBufferAsync() {
        return __awaiter(this, arguments, void 0, function* () {
            const resource = this.getResource.apply(this, arguments);
            if (resource === undefined) {
                return undefined;
            }
            const resourceOffset = resource.dataRva - this.sectionTableEntry.virtualAddress;
            const resourceFilePosition = this.sectionTableEntry.pointerToRawData + resourceOffset;
            const buffer = new Buffer(resource.size);
            buffer.fill(0);
            yield this.file.readAsync(buffer, 0, resource.size, resourceFilePosition);
            return buffer;
        });
    }
}
exports.ResourceSection = ResourceSection;
exports.default = ResourceSection;
