<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.VisualStudio.Services.ItemStore.Common</name>
    </assembly>
    <members>
        <member name="M:Microsoft.VisualStudio.Services.ItemStore.Common.ExpiringItemHelper.GetExpirationTimeStringToSetTo(System.Nullable{System.DateTime})">
            <summary>
            Determines what to set the retention expiration date of this item (the date after which it will be queued for deletion).
            Specify null to retain the item forever (never queue it for deletion).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.ItemStore.Common.ExpiringItemHelper.TryGetExpirationTime(System.String,System.Nullable{System.DateTime}@)">
            <summary>
            There are 3 cases for item expiration.
            1) If the item has no expiration data (the case for items uploaded to old versions of the service), then we return FALSE and sets the out parameter to NULL.
            2) If the item is retained forever (expiration = never), then we return TRUE and set the out parameter to NULL.
            3) If the item is set to expire on a specific date, then we return TRUE and set the out parameter to the specific date.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.ItemStore.Common.ExpiringItemHelper.IsRetainedForever(System.String)">
            <summary>
            Returns if the expirationTime should be interpreted as retained forever (expiration = never)
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.ItemStore.Common.ExpiringItemHelper.IsFiniteExpiration(Microsoft.VisualStudio.Services.ItemStore.Common.IExpiringItem,System.Nullable{System.DateTime}@)">
            <returns>true if the item has a finite expiration, false otherwise (expiration unset, or never)</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.ItemStore.Common.MoveItemOptions">
            <summary>Provides a set of flags for controlling the behavior of the MoveItemsAsync method.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.ItemStore.Common.MoveItemOptions.Default">
            <summary>No special hamdling operations are enabled.</summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.ItemStore.Common.MoveItemOptions.DeleteSourceIfDestinationExists">
            <summary>If the destination already exists, delete the source item and consider the move successful.</summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.ItemStore.Common.ItemUploader">
            <summary>
            This class facilitates the 3-part uploading process.
            Step 1: Associate the files to be uploaded to see if any of the files are already stored as Blobs.
            Step 2: Upload all of the missing files in chunks.
            Step 3: Associate the files again to add references to the newly-uploaded Blobs.  If any are reported as missing, then
                    something went wrong during the uploading process.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.ItemStore.Common.ItemUploader.UploadFilesAsync(System.Collections.Generic.IEnumerable{System.String},Microsoft.VisualStudio.Services.ItemStore.Common.IItemAssociator,Microsoft.VisualStudio.Services.ItemStore.Common.ItemTreeInfo,System.Boolean,System.Threading.CancellationToken,System.Object)">
            <summary>
            Given a list of filepaths to upload, compute their hashes, and then do the 3-step upload process.
            </summary>
            <param name="filepaths">List of filepaths to be uploaded.</param>
            <param name="itemAssociator">Object responsible for handling the Item association call.</param>
            <param name="specItemTreeInfo">ItemTreeInfo object as handle.</param>
            <param name="abortIfAlreadyExists">Flag to determine whether or not to ignore existing items.</param>
            <param name="cancellationToken">The token associated with cancelling </param>
            <param name="routeValues">object of values used to construct the associate call's server endpoint</param>
            <returns>Collection of upload results.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.ItemStore.Common.ItemUploader.UploadFilesAsync(System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Services.BlobStore.Common.FileBlobDescriptor},Microsoft.VisualStudio.Services.ItemStore.Common.IItemAssociator,Microsoft.VisualStudio.Services.ItemStore.Common.ItemTreeInfo,System.Boolean,Microsoft.VisualStudio.Services.BlobStore.WebApi.DedupStoreClient.UploadSession,System.Threading.CancellationToken,System.Object)">
            <param name="fileChunkIds">List of files and their hashes to upload.</param>
            <param name="itemAssociator">Object responsible for handling the Item association call.</param>
            <param name="specItemTreeInfo">ItemTreeInfo object as handle.</param>
            <param name="abortIfAlreadyExists">Flag to determine whether or not to ignore existing items.</param>
            <param name="cancellationToken">The token associated with cancelling </param>
            <param name="routeValues">object of values used to construct the associate call's server endpoint</param>
            <returns>Collection of upload results.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.ItemStore.Common.ItemUploader.SafeCreateStream(System.String)">
            <summary>
            Non-Throwing attempt to create a FileStream from a path.
            </summary>
            <param name="networkPath"></param>
            <returns>A FileStream if the one could be created with no exceptions, null otherwise.</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.ItemStore.Common.AssociationsItem.ItemCount">
            <summary>
            Count of FileItems/BlobItems, or "dedup items"
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.ItemStore.Common.AssociationsItem.ItemTreeInfo">
            <summary>
            A handle to an ItemTreeInfo describing how to access the items related to this associations request.  
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.ItemStore.Common.AssociationsStatus">
            <summary>
            Represents the current state of an Association between a container and a set of content
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.ItemStore.Common.AssociationsStatus.Missing">
            <summary>
            Missing ContentIdentifiers
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.ItemStore.Common.BlobItem.BlobLocation">
            <summary>
            Externally addressable URI Location of the item blob resource.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.ItemStore.Common.BlobItem.BlobIdentifier">
            <summary>
            The globally unique descriptor of the blob associated with this item
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.ItemStore.Common.BlobItem.TrySetDeleteInProgress(Microsoft.VisualStudio.Services.ItemStore.Common.StoredItem)">
            <remarks>
            Using a method (instead of a 'Set' property) to set deleting in progress to make it more
            explicit, convert to the right type, imply that this action cannot be undone, and avoid resetting DeleteStartedUtc time by accidentally setting IsDeleteInProgress
            property to true.
            </remarks>
            <returns><c>true</c>, if the item was updated</returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.ItemStore.Common.ContainerItem.RootLocation">
            <summary>
            The root item of this container
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.ItemStore.Common.ContainerItem.Name">
            <summary>
            The Name of this container
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.ItemStore.Common.ContainerItem.Sealed">
            <summary>
            Whether or not this container is (or should be) sealed
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.ItemStore.Common.ContainerItem.IsAppendOnly">
            <summary>
            Whether or not this container is append-only. If true, no items can be overwritten.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.ItemStore.Common.ContainerItem.UseIdReferences">
            <summary>
            This value indicates if we should remove IdReferences during delete
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.ItemStore.Common.FileItem">
            <summary>
            A file item represents a file in a container.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.ItemStore.Common.FileItem.Length">
            <summary>
            Length of the item.  Zero if not of a file.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.ItemStore.Common.Item.#ctor(Microsoft.VisualStudio.Services.ItemStore.Common.IItemData)">
            <summary>
            Internal and test use only, but left public for Activator.CreateInstance.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.ItemStore.Common.Item.Keys">
            <summary>
            Returns the list of keys present in the this item
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.ItemStore.Common.Item.ItemIndexer(System.String)">
            <summary>
            Get the value associated with the given key on this item.   If there is no such property or if the value 
            at the key is string, return null.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.ItemStore.Common.Item.FromJson``1(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Create an item of the given type based on the supplied JSON object
            </summary>
            <typeparam name="T">The type of item to create</typeparam>
            <param name="data">The data for the created item</param>
            <returns>The created item</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.ItemStore.Common.Item.FromJson``1(System.String)">
            <summary>
            Create an item of the given type based on the supplied JSON object text
            </summary>
            <typeparam name="T">The type of item to create</typeparam>
            <param name="content">The data for the created item</param>
            <returns>The created item</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.ItemStore.Common.Item.Convert``1">
            <summary>
            Convert this item to one of the given type.  If this item is already of the requested type, return this item.
            </summary>
            <typeparam name="T">The type to which this item should be converted.</typeparam>
            <returns>A new item of the given type.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.ItemStore.Common.Item.GetStrings(System.String)">
            <summary>
            Get the array of strings associated with the given key on this item.  If none or if the value 
            at the key is not an array of strings, return null.
            </summary>
            <param name="key">The name of the property to access.</param>
            <returns>The strings found at the given key</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.ItemStore.Common.Item.SetStrings(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sets an array of strings as the value of the identified property on this item.
            </summary>
            <param name="key">The property to set</param>
            <param name="values">The values to store</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.ItemStore.Common.Item.GetItem(System.String,System.Int32)">
            <summary>
            Return a handle for an item of type T.  Handles can be returned for any property of this 
            data that itself has a type property (see Item.ItemTypeKey).  If no such property exists, null is returned.
            </summary>
            <param name="key">The property key to look up in this data</param>
            <param name="index">The index into the discovered property if that property is an array.  
            If no index is given then the value at the key must not be an array.</param>
            <returns>A handle to the discovered data if it exists.  null otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.ItemStore.Common.Item.GetItems(System.String)">
            <summary>
            Get the all of the handles at a given key.  If there is only one (i.e., not an array) then return an
            enumerable with just that one.  If there are no handles then return null.
            </summary>
            <param name="key">The property of this item to look in for handles</param>
            <returns>The discovered handles or null if none.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.ItemStore.Common.Item.SetItem(System.String,Microsoft.VisualStudio.Services.ItemStore.Common.Item)">
            <summary>
            Set the value of the property with the given key in this item to the given value.  This will result
            in a single handle valued property being written.
            </summary>
            <param name="key">The property of this item to set</param>
            <param name="value">The handle to store</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.ItemStore.Common.Item.SetItems(System.String,System.Collections.Generic.IEnumerable{Microsoft.VisualStudio.Services.ItemStore.Common.Item})">
            <summary>
            Set the value of the property with the given key in this item to be the given set of handles. 
            </summary>
            <param name="key">The property of this item to set</param>
            <param name="items">The items to store</param>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.ItemStore.Common.StoredItem.#ctor">
            <summary>
            Create an new, empty instance of this item type
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.ItemStore.Common.StoredItem.#ctor(Microsoft.VisualStudio.Services.ItemStore.Common.IItemData)">
            <summary>
            Internal and test use only, but left public for Activator.CreateInstance.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.ItemStore.Common.StoredItem.ItemTypeId">
            <summary>
            The default item type for items represented by this class.  
            Note that the item type of an individual item may differ from the Type property
            of the class used to access the property. This is because multiple Item classes can be used to view
            and access the same Item Data.  In general the ItemType is the most general and inclusive interpretation
            of the properties represented by the item
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.ItemStore.Common.StoredItem.ItemType">
            <summary>
            Type of the item.  Note that the item type of an individual item may differ from the Type property
            of the class used to access the property. This is because multiple Item classes can be used to view
            and access the same Item Data.  In general the ItemType is the most general and inclusive interpretation
            of the properties represented by the item
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.ItemStore.Common.StoredItem.StorageETag">
            <summary>
            An EntityTag populated and updated by backing providers to aid with versioning of Items in the store.
            CompareSwap based operations will use this etag for comparison rather than comparing entire objects.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.ItemStore.Common.StoredItem.Verify(System.Lazy{System.Text.StringBuilder})">
            <summary>
            Enforces required property is set (ItemType).
            Used before serialization (ToJson) and after deserialization (FromJson).
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.ItemStore.Common.Extensions.ReadItemAsync``1(System.Net.Http.HttpContent)">
            <summary>
             Extracts an item from the HttpContent.
            </summary>
            <returns>Due to the static nature of extension methods, it's possible to call this method on a null reference. 
            If this occurs, this method returns a null Item, rather than throwing a Null Ref Exception, removing the need 
            for all callers to make that check themselves.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.ItemStore.Common.Extensions.AssociateAsync(Microsoft.VisualStudio.Services.ItemStore.Common.ItemHttpClientBase,System.Object,Microsoft.VisualStudio.Services.ItemStore.Common.AssociationsItem,System.Guid,System.Threading.CancellationToken)">
            <summary>
            Send an associate command through the client for the given files association info.
            </summary>
            <param name="client">The client to extend.</param>
            <param name="routeValues">Anonymous object with values used by VSS's routing.</param>
            <param name="spec">The association info for files-to-blob relationships.</param>
            <param name="resourceId">Id for the associate endpoint</param>
            <param name="cancellationToken">Token for cancelling the operation</param>
            <returns>Info for the resulting associations.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.ItemStore.Common.IItemAssociator">
            <summary>
            Interface that designates a class to have the responsibility of making an AssociateItems() call.
            This is used by the ItemUploader class.
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.ItemStore.Common.IItemAssociator.AssociateAsync(System.Object,Microsoft.VisualStudio.Services.ItemStore.Common.AssociationsItem,System.Threading.CancellationToken)">
            <summary>
            Atempt to add references for files defined in the associations spec, and return information
            about whether or not the files already existed.
            </summary>
            <param name="routeValues">Anonymous object with values used by VSS's routing.</param>
            <param name="spec">AssociationsItem containing files to be associated.</param>
            <param name="cancellationToken">Token to cancel.</param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.ItemStore.Common.IItemData.Keys">
            <summary>
            Returns the list of keys present in the this item data
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.ItemStore.Common.IItemData.Item(System.String)">
            <summary>
            Access the value of the given attribute on this contribution
            </summary>
            <param name="key">the attribute key</param>
            <returns>the attribute value if it exists. null otherwise.</returns>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.ItemStore.Common.IItemData.GetItem(System.String,System.Int32)">
            <summary>
            Return a handle for an item.  Handles can be returned for any property of this 
            data that itself has a type property (see Item.ItemTypeKey).  If no such property exists, null is returned.
            </summary>
            <param name="key">The property key to look up in this data</param>
            <param name="index">The index into the discovered property if that property is an array.  
            If no index is given then the value at the key must not be an array.</param>
            <returns>A handle to the discovered data if it exists.  null otherwise.</returns>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.ItemStore.Common.ItemHttpClientBase">
            <summary>
            Base class for all Item Storerelated clients.  Provide various operations for 
            handling items being passed back and forth.
            </summary>
        </member>
        <member name="T:Microsoft.VisualStudio.Services.ItemStore.Common.ItemTreeInfo">
            <summary>
            The description of how to access a set of items in the item store.
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.ItemStore.Common.ItemTreeInfo.RootKey">
            <summary>
            The key for the root property of this item
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.ItemStore.Common.ItemTreeInfo.BlobStoreUriKey">
            <summary>
            The key for the service url property of this item
            </summary>
        </member>
        <member name="F:Microsoft.VisualStudio.Services.ItemStore.Common.ItemTreeInfo.TicketInfoKey">
            <summary>
            The key for the ticket related info for this tree of items
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.ItemStore.Common.ItemTreeInfo.BlobStoreUri">
            <summary>
            The URI of the content service to use to access items represented by this info.
            The locator is relatively opaque to the clients.  It should be presented to the 
            content repository client when attempting to access items under the root.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.ItemStore.Common.ItemTreeInfo.Root">
            <summary>
            The locator for the root of this item tree.  The locator is relatively opaque to the clients.  It should be
            presented to the content repository when attempting to access items under the root.
            </summary>
        </member>
        <member name="P:Microsoft.VisualStudio.Services.ItemStore.Common.ItemTreeInfo.TicketInfo">
            <summary>
            The access control ticket information related to this tree of items for a particular user.  This is typically filled in
            by the server on granting access to the tree. 
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.ItemStore.Common.Resources.#cctor">
            Creates the resource manager instance.
        </member>
        <member name="M:Microsoft.VisualStudio.Services.ItemStore.Common.Resources.Get(System.String)">
            Returns a localized string given a resource string name.
        </member>
        <member name="M:Microsoft.VisualStudio.Services.ItemStore.Common.Resources.GetInt(System.String)">
            Returns a localized integer given a resource string name.
        </member>
        <member name="M:Microsoft.VisualStudio.Services.ItemStore.Common.Resources.GetBool(System.String)">
            Returns a localized string given a resource string name.
        </member>
        <member name="M:Microsoft.VisualStudio.Services.ItemStore.Common.Resources.Format(System.String,System.Object[])">
            A little helper function to alleviate some typing associated with loading resources and
            formatting the strings.  In DEBUG builds, it also asserts that the number of format
            arguments and the length of args match.
        </member>
        <member name="M:Microsoft.VisualStudio.Services.ItemStore.Common.Resources.ContainerNotFound(System.Object)">
            <summary>
            Container {0} not found
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.ItemStore.Common.Resources.DeletePendingContainer(System.Object)">
            <summary>
            Container {0} is pending deletion
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.ItemStore.Common.Resources.ItemNotFound(System.Object,System.Object)">
            <summary>
            Item {0} in container {1} not found
            </summary>
        </member>
        <member name="M:Microsoft.VisualStudio.Services.ItemStore.Common.Resources.SealedContainer(System.Object)">
            <summary>
            Container {0} is sealed
            </summary>
        </member>
    </members>
</doc>
