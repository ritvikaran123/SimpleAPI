import * as vsts from 'azure-devops-node-api';
export declare enum ProtocolType {
    NuGet = 0,
    Maven = 1,
    Npm = 2,
    PyPi = 3,
    Cargo = 4
}
export declare enum RegistryType {
    npm = 0,
    NuGetV2 = 1,
    NuGetV3 = 2,
    PyPiSimple = 3,
    PyPiUpload = 4
}
export interface PackagingLocation {
    PackagingUris: string[];
    DefaultPackagingUri: string;
}
export declare function getServiceUriFromAreaId(serviceUri: string, accessToken: string, areaId: string): Promise<string>;
export declare function getNuGetUriFromBaseServiceUri(serviceUri: string, accesstoken: string): Promise<string>;
export declare function getFeedUriFromBaseServiceUri(serviceUri: string, accesstoken: string): Promise<string>;
export declare function getBlobstoreUriFromBaseServiceUri(serviceUri: string, accesstoken: string): Promise<string>;
/**
 * PackagingLocation.PackagingUris:
 *  The first URI will always be the TFS collection URI
 *  The second URI, if existent, will be Packaging's default access point
 *  The remaining URI's will be alternate Packaging's access points
 */
export declare function getPackagingUris(protocolType: ProtocolType): Promise<PackagingLocation>;
export declare function getSystemAccessToken(): string;
export declare function getWebApiWithProxy(serviceUri: string, accessToken?: string): vsts.WebApi;
export declare function retryOnExceptionHelper<T>(action: () => Promise<T>, maxTries: number, retryIntervalInMilliseconds: number): Promise<T>;
export declare function retryOnNullOrExceptionHelper<T>(action: () => Promise<T>, maxTries: number, retryIntervalInMilliseconds: number): Promise<T>;
export declare function getFeedRegistryUrl(packagingUrl: string, registryType: RegistryType, feedId: string, project: string, accessToken?: string, useSession?: boolean): Promise<string>;
