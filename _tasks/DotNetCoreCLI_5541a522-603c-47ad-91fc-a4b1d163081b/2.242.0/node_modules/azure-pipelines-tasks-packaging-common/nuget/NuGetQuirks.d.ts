import VersionInfoVersion from "../pe-parser/VersionInfoVersion";
export declare enum NuGetQuirkName {
    /** Race condition in credential provider which causes NuGet to not supply credentials */
    CredentialProviderRace = 0,
    /** No credential provider support */
    NoCredentialProvider = 1,
    /** repositoryPath value in nuget.config is relative to the wrong nuget.config in some cases */
    RelativeRepositoryPathBug = 2,
    /** does not send NTLM credentials on follow-up requests */
    NtlmReAuthBug = 3,
    /** Does not support authentication to TFS on-premises via credential provider */
    NoTfsOnPremAuthCredentialProvider = 4,
    /** Does not support authentication to TFS on-premises via nuget.config */
    NoTfsOnPremAuthConfig = 5,
    /** Does not support the NuGet v3 protocol */
    NoV3 = 6,
    /** Supports V2 plugin credential provider */
    V2CredentialProvider = 7
}
export interface VersionRange {
    begin: VersionInfoVersion;
    beginIsInclusive: boolean;
    end: VersionInfoVersion;
    endIsInclusive: boolean;
}
export interface QuirkDescriptor {
    quirk: NuGetQuirkName;
    versionRanges: VersionRange[];
}
/** default quirks to use if the nuget version can't be determined */
export declare var defaultQuirks: NuGetQuirkName[];
export declare class NuGetQuirks {
    nuGetVersion: VersionInfoVersion;
    quirks: NuGetQuirkName[];
    constructor(nuGetVersion: VersionInfoVersion, quirks: NuGetQuirkName[]);
    static fromVersion(nuGetVersion: VersionInfoVersion, definitions?: QuirkDescriptor[]): NuGetQuirks;
    hasQuirk(quirk: NuGetQuirkName): boolean;
    getQuirkNames(): string[];
}
export default NuGetQuirks;
