/// <reference types="q" />
import { IExecOptions, IExecSyncResult, ToolRunner } from "azure-pipelines-task-lib/toolrunner";
import * as auth from "./Authentication";
import { NuGetQuirks } from "./NuGetQuirks";
export interface EnvironmentDictionary {
    [key: string]: string;
}
export interface NuGetEnvironmentSettings {
    credProviderFolder?: string;
    V2CredProviderPath?: string;
    extensionsDisabled: boolean;
    configFile?: string;
    registryUri?: string;
}
export declare function setNuGetProxyEnvironment(input: EnvironmentDictionary, configFile?: string, registryUri?: string): EnvironmentDictionary;
export declare class NuGetToolRunner2 extends ToolRunner {
    private settings;
    private authInfo;
    constructor(nuGetExePath: string, settings: NuGetEnvironmentSettings, authInfo: auth.NuGetExtendedAuthInfo);
    execSync(options?: IExecOptions): IExecSyncResult;
    exec(options?: IExecOptions): Q.Promise<number>;
}
export declare function createNuGetToolRunner(nuGetExePath: string, settings: NuGetEnvironmentSettings, authInfo: auth.NuGetExtendedAuthInfo): NuGetToolRunner2;
export declare function getNuGetQuirksAsync(nuGetExePath: string): Promise<NuGetQuirks>;
export declare function isCredentialProviderEnabled(quirks: NuGetQuirks): boolean;
export declare function isCredentialProviderV2Enabled(quirks: NuGetQuirks): boolean;
export declare function isCredentialConfigEnabled(quirks: NuGetQuirks): boolean;
export declare function getNuGetProxyFromEnvironment(): string;
export declare function getProxyBypassForUri(registryUri: string): string;
export declare function getProxyBypassForConfig(configFile: string): string;
