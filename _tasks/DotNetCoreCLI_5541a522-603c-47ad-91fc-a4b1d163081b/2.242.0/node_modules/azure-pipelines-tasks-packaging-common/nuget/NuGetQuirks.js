"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NuGetQuirks = exports.defaultQuirks = exports.NuGetQuirkName = void 0;
const VersionInfoVersion_1 = require("../pe-parser/VersionInfoVersion");
var NuGetQuirkName;
(function (NuGetQuirkName) {
    /** Race condition in credential provider which causes NuGet to not supply credentials */
    NuGetQuirkName[NuGetQuirkName["CredentialProviderRace"] = 0] = "CredentialProviderRace";
    /** No credential provider support */
    NuGetQuirkName[NuGetQuirkName["NoCredentialProvider"] = 1] = "NoCredentialProvider";
    /** repositoryPath value in nuget.config is relative to the wrong nuget.config in some cases */
    NuGetQuirkName[NuGetQuirkName["RelativeRepositoryPathBug"] = 2] = "RelativeRepositoryPathBug";
    /** does not send NTLM credentials on follow-up requests */
    NuGetQuirkName[NuGetQuirkName["NtlmReAuthBug"] = 3] = "NtlmReAuthBug";
    /** Does not support authentication to TFS on-premises via credential provider */
    NuGetQuirkName[NuGetQuirkName["NoTfsOnPremAuthCredentialProvider"] = 4] = "NoTfsOnPremAuthCredentialProvider";
    /** Does not support authentication to TFS on-premises via nuget.config */
    NuGetQuirkName[NuGetQuirkName["NoTfsOnPremAuthConfig"] = 5] = "NoTfsOnPremAuthConfig";
    /** Does not support the NuGet v3 protocol */
    NuGetQuirkName[NuGetQuirkName["NoV3"] = 6] = "NoV3";
    /** Supports V2 plugin credential provider */
    NuGetQuirkName[NuGetQuirkName["V2CredentialProvider"] = 7] = "V2CredentialProvider";
})(NuGetQuirkName = exports.NuGetQuirkName || (exports.NuGetQuirkName = {}));
function halfOpenRange(begin, end) {
    return { begin, beginIsInclusive: true, end, endIsInclusive: false };
}
function closedRange(begin, end) {
    return { begin, beginIsInclusive: true, end, endIsInclusive: true };
}
function versionIsInRange(version, range) {
    const beginComparison = VersionInfoVersion_1.default.compare(version, range.begin);
    const endComparison = VersionInfoVersion_1.default.compare(version, range.end);
    const beginResult = range.beginIsInclusive ? beginComparison >= 0 : beginComparison > 0;
    const endResult = range.endIsInclusive ? endComparison <= 0 : endComparison < 0;
    return beginResult && endResult;
}
const nuget300 = new VersionInfoVersion_1.default(3, 0, 0, 0);
const nuget320 = new VersionInfoVersion_1.default(3, 2, 0, 0);
const nuget330 = new VersionInfoVersion_1.default(3, 3, 0, 0);
const nuget340 = new VersionInfoVersion_1.default(3, 4, 0, 0);
const nuget350_1707 = new VersionInfoVersion_1.default(3, 5, 0, 1707);
const nuget350_1829 = new VersionInfoVersion_1.default(3, 5, 0, 1829);
const nuget351 = new VersionInfoVersion_1.default(3, 5, 1, 0);
const nuget351_1707 = new VersionInfoVersion_1.default(3, 5, 1, 1707);
const nuget480 = new VersionInfoVersion_1.default(4, 8, 0, 0);
const allQuirks = [
    {
        quirk: NuGetQuirkName.CredentialProviderRace,
        // 1707 is the build of * 3.5.1 * where we first saw the bug resolved,
        // I'm not sure which build of 3.5.0 is the first to not have the bug,
        // but it would be less than 1707
        versionRanges: [
            halfOpenRange(nuget320, nuget350_1707),
            halfOpenRange(nuget351, nuget351_1707)
        ],
    },
    {
        quirk: NuGetQuirkName.NoCredentialProvider,
        versionRanges: [halfOpenRange(VersionInfoVersion_1.default.MIN_VERSION, nuget320)],
    },
    {
        quirk: NuGetQuirkName.RelativeRepositoryPathBug,
        versionRanges: [halfOpenRange(nuget330, nuget340)],
    },
    {
        quirk: NuGetQuirkName.NtlmReAuthBug,
        versionRanges: [halfOpenRange(nuget330, nuget340)],
    },
    {
        quirk: NuGetQuirkName.NoV3,
        versionRanges: [halfOpenRange(VersionInfoVersion_1.default.MIN_VERSION, nuget300)],
    },
    {
        quirk: NuGetQuirkName.NoTfsOnPremAuthConfig,
        versionRanges: [closedRange(VersionInfoVersion_1.default.MIN_VERSION, VersionInfoVersion_1.default.MAX_VERSION)],
    },
    {
        quirk: NuGetQuirkName.NoTfsOnPremAuthCredentialProvider,
        versionRanges: [halfOpenRange(VersionInfoVersion_1.default.MIN_VERSION, nuget350_1829)],
    },
    {
        quirk: NuGetQuirkName.V2CredentialProvider,
        versionRanges: [halfOpenRange(nuget480, VersionInfoVersion_1.default.MAX_VERSION)],
    },
];
/** default quirks to use if the nuget version can't be determined */
exports.defaultQuirks = [
    NuGetQuirkName.NoCredentialProvider,
    NuGetQuirkName.NoV3,
    NuGetQuirkName.NoTfsOnPremAuthConfig,
    NuGetQuirkName.NoTfsOnPremAuthCredentialProvider,
];
function resolveQuirks(nuGetVersion, definitions) {
    return definitions
        .filter(quirkDesc => quirkDesc.versionRanges.some(range => versionIsInRange(nuGetVersion, range)))
        .map(quirkDesc => quirkDesc.quirk);
}
class NuGetQuirks {
    constructor(nuGetVersion, quirks) {
        this.nuGetVersion = nuGetVersion;
        this.quirks = quirks;
    }
    static fromVersion(nuGetVersion, definitions) {
        definitions = definitions || allQuirks;
        return new NuGetQuirks(nuGetVersion, resolveQuirks(nuGetVersion, definitions));
    }
    hasQuirk(quirk) {
        return this.quirks.some(x => x === quirk);
    }
    getQuirkNames() {
        return this.quirks.map(x => NuGetQuirkName[x]);
    }
}
exports.NuGetQuirks = NuGetQuirks;
exports.default = NuGetQuirks;
