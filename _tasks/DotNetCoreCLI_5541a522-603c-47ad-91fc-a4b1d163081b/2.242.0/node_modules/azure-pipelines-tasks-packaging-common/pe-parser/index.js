"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getFileVersionInfoAsync = void 0;
const PEImageFile_1 = require("./PEImageFile");
const PEParserError_1 = require("./PEParserError");
const ReadableFile_1 = require("./ReadableFile");
const ResourceSection_1 = require("./ResourceSection");
const VersionResource_1 = require("./VersionResource");
const versionResourceTypeId = 16;
const versionResourceName = 1;
const neutralLanguageId = 0;
function getFileVersionInfoAsync(file) {
    return __awaiter(this, void 0, void 0, function* () {
        const readableFile = typeof file === "string"
            ? yield ReadableFile_1.default.openAsync(file)
            : file;
        try {
            const peFile = yield PEImageFile_1.default.readAsync(readableFile);
            const resourceSectionTableEntry = peFile.getSection(".rsrc\0\0\0");
            if (!resourceSectionTableEntry) {
                throw new PEParserError_1.default("noResourceSection", "No resource section found in the file");
            }
            const resourceSection = yield ResourceSection_1.default.load(readableFile, resourceSectionTableEntry);
            const versionResourceBuffer = yield resourceSection.getResourceBufferAsync(versionResourceTypeId, versionResourceName, neutralLanguageId);
            if (!versionResourceBuffer) {
                throw new PEParserError_1.default("noVersionResource", "No neutral-language version resource found in the file");
            }
            let versionResource = new VersionResource_1.VersionResource(versionResourceBuffer);
            return versionResource.versionInfo;
        }
        finally {
            if (typeof file === "string" && readableFile) {
                // we opened the file, so we're responsible for closing it
                yield readableFile.closeAsync();
            }
        }
    });
}
exports.getFileVersionInfoAsync = getFileVersionInfoAsync;
