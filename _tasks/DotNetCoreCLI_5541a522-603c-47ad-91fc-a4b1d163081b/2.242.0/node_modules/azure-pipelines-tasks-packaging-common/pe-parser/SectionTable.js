"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SectionTable = void 0;
const sizeOfSectionTableEntry = 40;
function readSectionTableAsync(file, buffer, filePositionOfSectionTable, numberOfSections) {
    return __awaiter(this, void 0, void 0, function* () {
        let sections = [];
        for (let i = 0; i < numberOfSections; ++i) {
            let filePositionOfEntry = filePositionOfSectionTable + i * sizeOfSectionTableEntry;
            yield file.readAsync(buffer, 0, sizeOfSectionTableEntry, filePositionOfEntry);
            sections.push({
                name: buffer.toString("utf8", 0, 8),
                virtualSize: buffer.readUInt32LE(8),
                virtualAddress: buffer.readUInt32LE(12),
                sizeOfRawData: buffer.readUInt32LE(16),
                pointerToRawData: buffer.readUInt32LE(20),
                pointerToRelocations: buffer.readUInt32LE(24),
                pointerToLinenumbers: buffer.readUInt32LE(28),
                numberOfRelocations: buffer.readUInt16LE(32),
                numberOfLinenumbers: buffer.readUInt16LE(34),
                characteristics: buffer.readUInt32LE(36),
            });
        }
        return sections;
    });
}
class SectionTable {
    constructor(sections) {
        this.sections = sections;
    }
    static readAsync(file, buffer, filePositionOfSectionTable, numberOfSections) {
        return __awaiter(this, void 0, void 0, function* () {
            return new SectionTable(yield readSectionTableAsync(file, buffer, filePositionOfSectionTable, numberOfSections));
        });
    }
    getSection(name) {
        return this.sections.find(x => x.name === name);
    }
}
exports.SectionTable = SectionTable;
exports.default = SectionTable;
