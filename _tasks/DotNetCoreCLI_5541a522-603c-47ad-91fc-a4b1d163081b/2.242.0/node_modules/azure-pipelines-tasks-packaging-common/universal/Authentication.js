"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetExternalAuthInfo = exports.ExternalAuthType = exports.TokenExternalAuthInfo = exports.ExternalAuthInfo = exports.InternalAuthInfo = void 0;
const tl = require("azure-pipelines-task-lib");
class InternalAuthInfo {
    constructor(uriPrefixes, accessToken) {
        this.uriPrefixes = uriPrefixes;
        this.accessToken = accessToken;
    }
}
exports.InternalAuthInfo = InternalAuthInfo;
class ExternalAuthInfo {
    constructor(packageSource, authType) {
        this.packageSource = packageSource;
        this.authType = authType;
    }
}
exports.ExternalAuthInfo = ExternalAuthInfo;
class TokenExternalAuthInfo extends ExternalAuthInfo {
    constructor(packageSource, token) {
        super(packageSource, ExternalAuthType.Token);
        this.packageSource = packageSource;
        this.token = token;
    }
}
exports.TokenExternalAuthInfo = TokenExternalAuthInfo;
var ExternalAuthType;
(function (ExternalAuthType) {
    ExternalAuthType[ExternalAuthType["Token"] = 0] = "Token";
    ExternalAuthType[ExternalAuthType["UsernamePassword"] = 1] = "UsernamePassword";
})(ExternalAuthType = exports.ExternalAuthType || (exports.ExternalAuthType = {}));
function GetExternalAuthInfo(inputKey) {
    let externalAuthInfo;
    let endpointName = tl.getInput(inputKey);
    const accountUri = tl.getEndpointUrl(endpointName, false);
    let externalAuth = tl.getEndpointAuthorization(endpointName, false);
    switch (externalAuth.scheme.toLocaleLowerCase()) {
        case "token":
            let token = externalAuth.parameters["apitoken"];
            externalAuthInfo = new TokenExternalAuthInfo({
                accountUrl: accountUri
            }, token);
            break;
        case "usernamepassword":
            tl.error(tl.loc("Error_AuthNotSupported"));
            break;
        default:
            break;
    }
    return externalAuthInfo;
}
exports.GetExternalAuthInfo = GetExternalAuthInfo;
