"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerLocationHelpersMock = void 0;
function registerLocationHelpersMock(tmr) {
    const mockLocationUtils = {
        getFeedUriFromBaseServiceUri: function (serviceUri, accesstoken) {
            return serviceUri + "/feed";
        },
        getBlobstoreUriFromBaseServiceUri: function (serviceUri, accesstoken) {
            return serviceUri + "/blobstore";
        },
        getPackagingUris: function (input) {
            const collectionUrl = "https://vsts/packagesource";
            return {
                PackagingUris: [collectionUrl],
                DefaultPackagingUri: collectionUrl
            };
        },
        getWebApiWithProxy: function (serviceUri, accessToken) {
            return {
                vsoClient: {
                    getVersioningData: function (ApiVersion, PackagingAreaName, PackageAreaId, Obj) {
                        return __awaiter(this, void 0, void 0, function* () {
                            return { requestUrl: 'foobar' };
                        });
                    }
                }
            };
        },
        getSystemAccessToken: function () {
            return "token";
        },
        getFeedRegistryUrl: function (packagingUrl, registryType, feedId, project, accessToken) {
            var url = packagingUrl;
            if (project != null) {
                url = url + "/" + project;
            }
            return url + "/" + feedId;
        },
        retryOnExceptionHelper: function (action, maxTries, retryIntervalInMilliseconds) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield action();
            });
        },
        ProtocolType: { NuGet: 1, Npm: 2, Maven: 3, PyPi: 4 },
        RegistryType: { npm: 1, NuGetV2: 2, NuGetV3: 3, PyPiSimple: 4, PyPiUpload: 5 }
    };
    tmr.registerMock('azure-pipelines-tasks-packaging-common/locationUtilities', mockLocationUtils);
    tmr.registerMock('../locationUtilities', mockLocationUtils);
}
exports.registerLocationHelpersMock = registerLocationHelpersMock;
