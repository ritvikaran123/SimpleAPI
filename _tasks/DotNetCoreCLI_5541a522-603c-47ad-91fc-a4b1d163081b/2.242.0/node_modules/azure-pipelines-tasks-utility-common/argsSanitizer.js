"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.sanitizeArgs = void 0;
/**
 * This function sanitizes input arguments. We're sanitizing each symbol which we think is dangerous.
 * @param {string} args - original input arguments param
 * @param {SanitizeScriptArgsOptions} options - sanitizer options
 * @returns {[string, ArgsSanitizerTelemetry]} sanitized input arguments, and telemetry
 */
function sanitizeArgs(args, options) {
    var _a, _b;
    if (!args) {
        return [args, null];
    }
    const { argsSplitSymbols } = options;
    const removedSymbolSign = (_a = options.removedSymbolSign) !== null && _a !== void 0 ? _a : '_#removed#_';
    const matchesChunks = [];
    // '?<!`' - checks if before a character is no escaping symbol. '^a-zA-Z0-9\`\\ _'"\-=/:' - checking if character is allowed. Instead replaces to _#removed#_
    const saniziteRegExp = (_b = options.saniziteRegExp) !== null && _b !== void 0 ? _b : new RegExp(`(?<!${getEscapingSymbol(argsSplitSymbols)})([^a-zA-Z0-9\\\`\\\\ _'"\\\-=\\\/:\.])`, 'g');
    if (!saniziteRegExp.global) {
        throw new Error("Only global regular expressions are allowed.");
    }
    // We're splitting by esc. symbol pairs, removing all suspicious characters and then join back
    const argsChunks = args.split(argsSplitSymbols);
    for (let i = 0; i < argsChunks.length; i++) {
        matchesChunks[i] = argsChunks[i].match(saniziteRegExp);
        argsChunks[i] = argsChunks[i].replace(saniziteRegExp, removedSymbolSign);
    }
    const resultArgs = argsChunks.join(argsSplitSymbols);
    let telemetry = null;
    if (resultArgs != args) {
        const matches = [].concat(...matchesChunks !== null && matchesChunks !== void 0 ? matchesChunks : []);
        telemetry = {
            removedSymbols: combineMatches(matches),
            removedSymbolsCount: matches.length
        };
    }
    return [resultArgs, telemetry];
}
exports.sanitizeArgs = sanitizeArgs;
function getEscapingSymbol(argsSplitSymbols) {
    switch (argsSplitSymbols) {
        case '\\\\':
            return '\\\\';
        case '``':
            return '`';
        default:
            throw new Error('Unknown args splitting symbols.');
    }
}
function combineMatches(matches) {
    const matchesData = {};
    for (const m of matches) {
        if (matchesData[m]) {
            matchesData[m]++;
            continue;
        }
        matchesData[m] = 1;
    }
    return matchesData;
}
