"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.runArgsSanitizerTelemetryTests = exports.runArgsSanitizerTests = void 0;
const assert = require("assert");
const argsSanitizer_1 = require("../argsSanitizer");
function runArgsSanitizerTests() {
    [
        "Param1 Param2",
        "Param1 `| Out-File ./321",
        "'Param 1' 'Param 2'",
        "hello`;world",
        null,
        undefined,
        ""
    ].forEach((input) => {
        it(`Should return '${input}' with no replacement.`, () => {
            const [result] = argsSanitizer_1.sanitizeArgs(input, { argsSplitSymbols: '``' });
            assert.equal(result, input);
        });
    });
    [
        "Param1 Param2",
        "Param1 \\| Out-File ./321",
        "'Param 1' 'Param 2'",
        "hello`\\;world",
    ].forEach((input) => {
        it(`Should return '${input}' with no replacement. With \\`, () => {
            const [result] = argsSanitizer_1.sanitizeArgs(input, { argsSplitSymbols: '\\\\', });
            assert.equal(result, input);
        });
    });
    [
        ["1 ``; whoami", "``", "1 ``_#removed#_ whoami"],
        ["'1 ``; whoami'", "\\\\", "'1 ``_#removed#_ whoami'"],
        ["1 \\\\; whoami", "\\\\", "1 \\\\_#removed#_ whoami"],
        ["1 `; whoami", "\\\\", "1 `_#removed#_ whoami"] // if trying to use not matched escaping symbol
    ].forEach(([input, argsSplitSymbols, expected]) => {
        it(`Should process '${input}' and replace to '${expected}'`, () => {
            const [result] = argsSanitizer_1.sanitizeArgs(input, { argsSplitSymbols });
            assert.equal(result, expected);
        });
    });
    [
        ["${Param1}", "_#removed#__#removed#_Param1_#removed#_"],
        ["1 | Out-File ./321", "1 _#removed#_ Out-File ./321"],
        ["12 && whoami", "12 _#removed#__#removed#_ whoami"],
        ["'12 && whoami'", "'12 _#removed#__#removed#_ whoami'"],
    ].forEach(([input, expected]) => {
        it(`'${input}' should be replaced to '${expected}'.`, () => {
            const [result] = argsSanitizer_1.sanitizeArgs(input, { argsSplitSymbols: '``' });
            assert.equal(result, expected);
        });
    });
    it('Should use input reg exp', () => {
        const regx = /2/g;
        const input = "1 2";
        const expected = '1 _#removed#_';
        const [result] = argsSanitizer_1.sanitizeArgs(input, { argsSplitSymbols: '``', saniziteRegExp: regx });
        assert.equal(result, expected);
    });
    it('Throws error if \'global\' flag not set', () => {
        const regx = /1/;
        assert.throws(() => argsSanitizer_1.sanitizeArgs('1', { argsSplitSymbols: '``', saniziteRegExp: regx }));
    });
}
exports.runArgsSanitizerTests = runArgsSanitizerTests;
function runArgsSanitizerTelemetryTests() {
    it('Should return correct telemetry', () => {
        const regx = /[^2 ]/g;
        const input = "1 2 4 3 3 3;;_";
        const expected = {
            removedSymbols: {
                '1': 1,
                '3': 3,
                '4': 1,
                ';': 2,
                '_': 1,
            },
            removedSymbolsCount: 8
        };
        const [, result] = argsSanitizer_1.sanitizeArgs(input, { argsSplitSymbols: '``', saniziteRegExp: regx });
        assert.deepStrictEqual(result, expected);
    });
    it('Returns null if nothing changed', () => {
        const regx = /2/g;
        const input = "1 3 5";
        const expected = null;
        const [, result] = argsSanitizer_1.sanitizeArgs(input, { argsSplitSymbols: '``', saniziteRegExp: regx });
        assert.deepStrictEqual(result, expected);
    });
}
exports.runArgsSanitizerTelemetryTests = runArgsSanitizerTelemetryTests;
