// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.
"use strict";
const restm = require("./RestClient");
const httpm = require("./HttpClient");
const vsom = require("./VsoClient");
class ClientApiBase {
    constructor(baseUrl, handlers, userAgent) {
        this.baseUrl = baseUrl;
        this.httpClient = new httpm.HttpCallbackClient(userAgent, handlers);
        this.restCallbackClient = new restm.RestCallbackClient(this.httpClient);
        this.restClient = new restm.RestClient(userAgent, handlers);
        this.vsoClient = new vsom.VsoClient(baseUrl, this.restCallbackClient);
        this.userAgent = userAgent;
    }
    setUserAgent(userAgent) {
        this.userAgent = userAgent;
        this.httpClient.userAgent = userAgent;
    }
    connect() {
        return new Promise((resolve, reject) => {
            this.restCallbackClient.get(this.vsoClient.resolveUrl('/_apis/connectionData'), "", (err, statusCode, obj) => {
                if (err) {
                    err.statusCode = statusCode;
                    reject(err);
                }
                else {
                    resolve(obj);
                }
            }, null);
        });
    }
    createAcceptHeader(type, apiVersion) {
        return this.restCallbackClient.createAcceptHeader(type, apiVersion);
    }
}
exports.ClientApiBase = ClientApiBase;
