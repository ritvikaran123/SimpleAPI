/*
* ---------------------------------------------------------
* Copyright(C) Microsoft Corporation. All rights reserved.
* ---------------------------------------------------------
*
* ---------------------------------------------------------
* Generated file, DO NOT EDIT
* ---------------------------------------------------------
*/
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const basem = require("./ClientApiBases");
const serm = require("./Serialization");
const TaskAgentInterfaces = require("./interfaces/TaskAgentInterfaces");
class TaskAgentApiBase extends basem.ClientApiBase {
    constructor(baseUrl, handlers) {
        super(baseUrl, handlers, 'node-TaskAgent-api');
    }
    /**
    * @param {TaskAgentInterfaces.TaskAgent} agent
    * @param {number} poolId
    */
    addAgent(agent, poolId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    poolId: poolId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "e298ef32-5878-4cab-993c-043836571f42", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.create(url, apiVersion, agent, null);
                    let serializationData = { requestTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgent, responseTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgent, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {number} poolId
    * @param {number} agentId
    */
    deleteAgent(poolId, agentId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    poolId: poolId,
                    agentId: agentId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "e298ef32-5878-4cab-993c-043836571f42", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.del(url, apiVersion, null);
                    let serializationData = { responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(null);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {number} poolId
    * @param {number} agentId
    * @param {boolean} includeCapabilities
    * @param {boolean} includeAssignedRequest
    * @param {string[]} propertyFilters
    */
    getAgent(poolId, agentId, includeCapabilities, includeAssignedRequest, propertyFilters) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    poolId: poolId,
                    agentId: agentId
                };
                let queryValues = {
                    includeCapabilities: includeCapabilities,
                    includeAssignedRequest: includeAssignedRequest,
                    propertyFilters: propertyFilters && propertyFilters.join(","),
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "e298ef32-5878-4cab-993c-043836571f42", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgent, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {number} poolId
    * @param {string} agentName
    * @param {boolean} includeCapabilities
    * @param {boolean} includeAssignedRequest
    * @param {string[]} propertyFilters
    * @param {string[]} demands
    */
    getAgents(poolId, agentName, includeCapabilities, includeAssignedRequest, propertyFilters, demands) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    poolId: poolId
                };
                let queryValues = {
                    agentName: agentName,
                    includeCapabilities: includeCapabilities,
                    includeAssignedRequest: includeAssignedRequest,
                    propertyFilters: propertyFilters && propertyFilters.join(","),
                    demands: demands && demands.join(","),
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "e298ef32-5878-4cab-993c-043836571f42", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgent, responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {TaskAgentInterfaces.TaskAgent} agent
    * @param {number} poolId
    * @param {number} agentId
    */
    replaceAgent(agent, poolId, agentId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    poolId: poolId,
                    agentId: agentId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "e298ef32-5878-4cab-993c-043836571f42", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.replace(url, apiVersion, agent, null);
                    let serializationData = { requestTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgent, responseTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgent, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {TaskAgentInterfaces.TaskAgent} agent
    * @param {number} poolId
    * @param {number} agentId
    */
    updateAgent(agent, poolId, agentId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    poolId: poolId,
                    agentId: agentId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "e298ef32-5878-4cab-993c-043836571f42", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.update(url, apiVersion, agent, null);
                    let serializationData = { requestTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgent, responseTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgent, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    */
    getAzureSubscriptions() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {};
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "bcd6189c-0303-471f-a8e1-acb22b74d700", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Proxy for a GET request defined by an 'endpoint'. The request is authorized using a service connection. The response is filtered using an XPath/Json based selector.
    *
    * @param {TaskAgentInterfaces.TaskDefinitionEndpoint} endpoint - Describes the URL to fetch.
    */
    queryEndpoint(endpoint) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {};
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "f223b809-8c33-4b7d-b53f-07232569b5d6", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.create(url, apiVersion, endpoint, null);
                    let serializationData = { responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} hubName
    * @param {boolean} includeEnterpriseUsersCount
    */
    getTaskHubLicenseDetails(hubName, includeEnterpriseUsersCount) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    hubName: hubName
                };
                let queryValues = {
                    includeEnterpriseUsersCount: includeEnterpriseUsersCount,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "f9f0f436-b8a1-4475-9041-1ccdbf8f0128", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {TaskAgentInterfaces.TaskHubLicenseDetails} taskHubLicenseDetails
    * @param {string} hubName
    */
    updateTaskHubLicenseDetails(taskHubLicenseDetails, hubName) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    hubName: hubName
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "f9f0f436-b8a1-4475-9041-1ccdbf8f0128", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.replace(url, apiVersion, taskHubLicenseDetails, null);
                    let serializationData = { responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {number} poolId
    * @param {number} requestId
    * @param {string} lockToken
    */
    deleteAgentRequest(poolId, requestId, lockToken) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    poolId: poolId,
                    requestId: requestId
                };
                let queryValues = {
                    lockToken: lockToken,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "fc825784-c92a-4299-9221-998a02d1b54f", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.del(url, apiVersion, null);
                    let serializationData = { responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(null);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {number} poolId
    * @param {number} requestId
    */
    getAgentRequest(poolId, requestId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    poolId: poolId,
                    requestId: requestId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "fc825784-c92a-4299-9221-998a02d1b54f", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgentJobRequest, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {number} poolId
    * @param {number} agentId
    * @param {number} completedRequestCount
    */
    getAgentRequestsForAgent(poolId, agentId, completedRequestCount) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    poolId: poolId
                };
                let queryValues = {
                    agentId: agentId,
                    completedRequestCount: completedRequestCount,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "fc825784-c92a-4299-9221-998a02d1b54f", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgentJobRequest, responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {number} poolId
    * @param {number[]} agentIds
    * @param {number} completedRequestCount
    */
    getAgentRequestsForAgents(poolId, agentIds, completedRequestCount) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    poolId: poolId
                };
                let queryValues = {
                    agentIds: agentIds && agentIds.join(","),
                    completedRequestCount: completedRequestCount,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "fc825784-c92a-4299-9221-998a02d1b54f", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgentJobRequest, responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {number} poolId
    * @param {string} planId
    * @param {string} jobId
    */
    getAgentRequestsForPlan(poolId, planId, jobId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    poolId: poolId
                };
                let queryValues = {
                    planId: planId,
                    jobId: jobId,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "fc825784-c92a-4299-9221-998a02d1b54f", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgentJobRequest, responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {TaskAgentInterfaces.TaskAgentJobRequest} request
    * @param {number} poolId
    */
    queueAgentRequest(request, poolId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    poolId: poolId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "fc825784-c92a-4299-9221-998a02d1b54f", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.create(url, apiVersion, request, null);
                    let serializationData = { requestTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgentJobRequest, responseTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgentJobRequest, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {TaskAgentInterfaces.TaskAgentJobRequest} request
    * @param {number} poolId
    * @param {number} requestId
    * @param {string} lockToken
    */
    updateAgentRequest(request, poolId, requestId, lockToken) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    poolId: poolId,
                    requestId: requestId
                };
                let queryValues = {
                    lockToken: lockToken,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "fc825784-c92a-4299-9221-998a02d1b54f", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.update(url, apiVersion, request, null);
                    let serializationData = { requestTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgentJobRequest, responseTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgentJobRequest, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {TaskAgentInterfaces.DeploymentMachineGroup} machineGroup
    * @param {string} project - Project ID or project name
    */
    addDeploymentMachineGroup(machineGroup, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "d4adf50f-80c6-4ac8-9ca1-6e4e544286e9", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.create(url, apiVersion, machineGroup, null);
                    let serializationData = { requestTypeMetadata: TaskAgentInterfaces.TypeInfo.DeploymentMachineGroup, responseTypeMetadata: TaskAgentInterfaces.TypeInfo.DeploymentMachineGroup, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {number} machineGroupId
    */
    deleteDeploymentMachineGroup(project, machineGroupId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    machineGroupId: machineGroupId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "d4adf50f-80c6-4ac8-9ca1-6e4e544286e9", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.del(url, apiVersion, null);
                    let serializationData = { responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(null);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {number} machineGroupId
    * @param {TaskAgentInterfaces.MachineGroupActionFilter} actionFilter
    */
    getDeploymentMachineGroup(project, machineGroupId, actionFilter) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    machineGroupId: machineGroupId
                };
                let queryValues = {
                    actionFilter: actionFilter,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "d4adf50f-80c6-4ac8-9ca1-6e4e544286e9", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: TaskAgentInterfaces.TypeInfo.DeploymentMachineGroup, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {string} machineGroupName
    * @param {TaskAgentInterfaces.MachineGroupActionFilter} actionFilter
    */
    getDeploymentMachineGroups(project, machineGroupName, actionFilter) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project
                };
                let queryValues = {
                    machineGroupName: machineGroupName,
                    actionFilter: actionFilter,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "d4adf50f-80c6-4ac8-9ca1-6e4e544286e9", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: TaskAgentInterfaces.TypeInfo.DeploymentMachineGroup, responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {TaskAgentInterfaces.DeploymentMachineGroup} machineGroup
    * @param {string} project - Project ID or project name
    * @param {number} machineGroupId
    */
    updateDeploymentMachineGroup(machineGroup, project, machineGroupId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    machineGroupId: machineGroupId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "d4adf50f-80c6-4ac8-9ca1-6e4e544286e9", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.update(url, apiVersion, machineGroup, null);
                    let serializationData = { requestTypeMetadata: TaskAgentInterfaces.TypeInfo.DeploymentMachineGroup, responseTypeMetadata: TaskAgentInterfaces.TypeInfo.DeploymentMachineGroup, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {number} machineGroupId
    * @param {string[]} tagFilters
    */
    getDeploymentMachines(project, machineGroupId, tagFilters) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    machineGroupId: machineGroupId
                };
                let queryValues = {
                    tagFilters: tagFilters && tagFilters.join(","),
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "966c3874-c347-4b18-a90c-d509116717fd", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: TaskAgentInterfaces.TypeInfo.DeploymentMachine, responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {TaskAgentInterfaces.DeploymentMachine[]} deploymentMachines
    * @param {string} project - Project ID or project name
    * @param {number} machineGroupId
    */
    updateDeploymentMachines(deploymentMachines, project, machineGroupId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    machineGroupId: machineGroupId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "966c3874-c347-4b18-a90c-d509116717fd", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.update(url, apiVersion, deploymentMachines, null);
                    let serializationData = { requestTypeMetadata: TaskAgentInterfaces.TypeInfo.DeploymentMachine, responseTypeMetadata: TaskAgentInterfaces.TypeInfo.DeploymentMachine, responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {number} poolId
    * @param {number} messageId
    * @param {string} sessionId
    */
    deleteMessage(poolId, messageId, sessionId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    poolId: poolId,
                    messageId: messageId
                };
                let queryValues = {
                    sessionId: sessionId,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "c3a054f6-7a8a-49c0-944e-3a8e5d7adfd7", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.del(url, apiVersion, null);
                    let serializationData = { responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(null);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {number} poolId
    * @param {string} sessionId
    * @param {number} lastMessageId
    */
    getMessage(poolId, sessionId, lastMessageId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    poolId: poolId
                };
                let queryValues = {
                    sessionId: sessionId,
                    lastMessageId: lastMessageId,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "c3a054f6-7a8a-49c0-944e-3a8e5d7adfd7", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {number} poolId
    * @param {number} agentId
    */
    refreshAgent(poolId, agentId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    poolId: poolId
                };
                let queryValues = {
                    agentId: agentId,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "c3a054f6-7a8a-49c0-944e-3a8e5d7adfd7", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.create(url, apiVersion, null, null);
                    let serializationData = { responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(null);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {number} poolId
    */
    refreshAgents(poolId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    poolId: poolId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "c3a054f6-7a8a-49c0-944e-3a8e5d7adfd7", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.create(url, apiVersion, null, null);
                    let serializationData = { responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(null);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {TaskAgentInterfaces.TaskAgentMessage} message
    * @param {number} poolId
    * @param {number} requestId
    */
    sendMessage(message, poolId, requestId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    poolId: poolId
                };
                let queryValues = {
                    requestId: requestId,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "c3a054f6-7a8a-49c0-944e-3a8e5d7adfd7", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.create(url, apiVersion, message, null);
                    let serializationData = { responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(null);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} packageType
    * @param {string} platform
    * @param {string} version
    */
    getPackage(packageType, platform, version) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    packageType: packageType,
                    platform: platform,
                    version: version
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.2", "distributedtask", "8ffcd551-079c-493a-9c02-54346299d144", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: TaskAgentInterfaces.TypeInfo.PackageMetadata, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} packageType
    * @param {string} platform
    * @param {number} top
    */
    getPackages(packageType, platform, top) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    packageType: packageType,
                    platform: platform
                };
                let queryValues = {
                    '$top': top,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.2", "distributedtask", "8ffcd551-079c-493a-9c02-54346299d144", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: TaskAgentInterfaces.TypeInfo.PackageMetadata, responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {number} poolId
    */
    getAgentPoolRoles(poolId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    poolId: poolId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "381dd2bb-35cf-4103-ae8c-3c815b25763c", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {TaskAgentInterfaces.TaskAgentPool} pool
    */
    addAgentPool(pool) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {};
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "a8c47e17-4d56-4a56-92bb-de7ea7dc65be", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.create(url, apiVersion, pool, null);
                    let serializationData = { requestTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgentPool, responseTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgentPool, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {number} poolId
    */
    deleteAgentPool(poolId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    poolId: poolId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "a8c47e17-4d56-4a56-92bb-de7ea7dc65be", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.del(url, apiVersion, null);
                    let serializationData = { responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(null);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {number} poolId
    * @param {string[]} properties
    * @param {TaskAgentInterfaces.TaskAgentPoolActionFilter} actionFilter
    */
    getAgentPool(poolId, properties, actionFilter) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    poolId: poolId
                };
                let queryValues = {
                    properties: properties && properties.join(","),
                    actionFilter: actionFilter,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "a8c47e17-4d56-4a56-92bb-de7ea7dc65be", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgentPool, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} poolName
    * @param {string[]} properties
    * @param {TaskAgentInterfaces.TaskAgentPoolType} poolType
    * @param {TaskAgentInterfaces.TaskAgentPoolActionFilter} actionFilter
    */
    getAgentPools(poolName, properties, poolType, actionFilter) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {};
                let queryValues = {
                    poolName: poolName,
                    properties: properties && properties.join(","),
                    poolType: poolType,
                    actionFilter: actionFilter,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "a8c47e17-4d56-4a56-92bb-de7ea7dc65be", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgentPool, responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {TaskAgentInterfaces.TaskAgentPool} pool
    * @param {number} poolId
    */
    updateAgentPool(pool, poolId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    poolId: poolId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "a8c47e17-4d56-4a56-92bb-de7ea7dc65be", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.update(url, apiVersion, pool, null);
                    let serializationData = { requestTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgentPool, responseTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgentPool, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {number} queueId
    */
    getAgentQueueRoles(queueId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    queueId: queueId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "b0c6d64d-c9fa-4946-b8de-77de623ee585", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {TaskAgentInterfaces.TaskAgentQueue} queue
    * @param {string} project - Project ID or project name
    */
    addAgentQueue(queue, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "900fa995-c559-4923-aae7-f8424fe4fbea", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.create(url, apiVersion, queue, null);
                    let serializationData = { requestTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgentQueue, responseTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgentQueue, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    */
    createTeamProject(project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "900fa995-c559-4923-aae7-f8424fe4fbea", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.replace(url, apiVersion, null, null);
                    let serializationData = { responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(null);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {number} queueId
    * @param {string} project - Project ID or project name
    */
    deleteAgentQueue(queueId, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    queueId: queueId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "900fa995-c559-4923-aae7-f8424fe4fbea", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.del(url, apiVersion, null);
                    let serializationData = { responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(null);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {number} queueId
    * @param {string} project - Project ID or project name
    * @param {TaskAgentInterfaces.TaskAgentQueueActionFilter} actionFilter
    */
    getAgentQueue(queueId, project, actionFilter) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    queueId: queueId
                };
                let queryValues = {
                    actionFilter: actionFilter,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "900fa995-c559-4923-aae7-f8424fe4fbea", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgentQueue, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {string} queueName
    * @param {TaskAgentInterfaces.TaskAgentQueueActionFilter} actionFilter
    */
    getAgentQueues(project, queueName, actionFilter) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project
                };
                let queryValues = {
                    queueName: queueName,
                    actionFilter: actionFilter,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "900fa995-c559-4923-aae7-f8424fe4fbea", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgentQueue, responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {TaskAgentInterfaces.ServiceEndpointRequest} serviceEndpointRequest
    * @param {string} project - Project ID or project name
    * @param {string} endpointId
    */
    executeServiceEndpointRequest(serviceEndpointRequest, project, endpointId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project
                };
                let queryValues = {
                    endpointId: endpointId,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.2", "distributedtask", "f956a7de-d766-43af-81b1-e9e349245634", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.create(url, apiVersion, serviceEndpointRequest, null);
                    let serializationData = { responseTypeMetadata: TaskAgentInterfaces.TypeInfo.ServiceEndpointRequestResult, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Proxy for a GET request defined by an service endpoint. The request is authorized using a data source in service endpoint. The response is filtered using an XPath/Json based selector.
    *
    * @param {TaskAgentInterfaces.DataSourceBinding} binding - Describes the data source to fetch.
    * @param {string} project - Project ID or project name
    */
    queryServiceEndpoint(binding, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.2", "distributedtask", "f956a7de-d766-43af-81b1-e9e349245634", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.create(url, apiVersion, binding, null);
                    let serializationData = { responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {TaskAgentInterfaces.ServiceEndpoint} endpoint
    * @param {string} project - Project ID or project name
    */
    createServiceEndpoint(endpoint, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.2", "distributedtask", "dca61d2f-3444-410a-b5ec-db2fc4efb4c5", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.create(url, apiVersion, endpoint, null);
                    let serializationData = { responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {string} endpointId
    */
    deleteServiceEndpoint(project, endpointId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    endpointId: endpointId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.2", "distributedtask", "dca61d2f-3444-410a-b5ec-db2fc4efb4c5", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.del(url, apiVersion, null);
                    let serializationData = { responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(null);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {string} endpointId
    */
    getServiceEndpointDetails(project, endpointId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    endpointId: endpointId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.2", "distributedtask", "dca61d2f-3444-410a-b5ec-db2fc4efb4c5", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {string} type
    * @param {string[]} authSchemes
    * @param {string[]} endpointIds
    * @param {boolean} includeFailed
    */
    getServiceEndpoints(project, type, authSchemes, endpointIds, includeFailed) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project
                };
                let queryValues = {
                    type: type,
                    authSchemes: authSchemes && authSchemes.join(","),
                    endpointIds: endpointIds && endpointIds.join(","),
                    includeFailed: includeFailed,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.2", "distributedtask", "dca61d2f-3444-410a-b5ec-db2fc4efb4c5", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {TaskAgentInterfaces.ServiceEndpoint} endpoint
    * @param {string} project - Project ID or project name
    * @param {string} endpointId
    */
    updateServiceEndpoint(endpoint, project, endpointId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    endpointId: endpointId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.2", "distributedtask", "dca61d2f-3444-410a-b5ec-db2fc4efb4c5", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.replace(url, apiVersion, endpoint, null);
                    let serializationData = { responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} type
    * @param {string} scheme
    */
    getServiceEndpointTypes(type, scheme) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {};
                let queryValues = {
                    type: type,
                    scheme: scheme,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "7c74af83-8605-45c1-a30b-7a05d5d7f8c1", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: TaskAgentInterfaces.TypeInfo.ServiceEndpointType, responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {TaskAgentInterfaces.TaskAgentSession} session
    * @param {number} poolId
    */
    createAgentSession(session, poolId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    poolId: poolId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "134e239e-2df3-4794-a6f6-24f1f19ec8dc", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.create(url, apiVersion, session, null);
                    let serializationData = { requestTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgentSession, responseTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgentSession, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {number} poolId
    * @param {string} sessionId
    */
    deleteAgentSession(poolId, sessionId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    poolId: poolId,
                    sessionId: sessionId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "134e239e-2df3-4794-a6f6-24f1f19ec8dc", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.del(url, apiVersion, null);
                    let serializationData = { responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(null);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {TaskAgentInterfaces.TaskGroup} taskGroup
    * @param {string} project - Project ID or project name
    */
    addTaskGroup(taskGroup, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "6c08ffbf-dbf1-4f9a-94e5-a1cbd47005e7", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.create(url, apiVersion, taskGroup, null);
                    let serializationData = { responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {string} taskGroupId
    */
    deleteTaskGroup(project, taskGroupId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    taskGroupId: taskGroupId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "6c08ffbf-dbf1-4f9a-94e5-a1cbd47005e7", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.del(url, apiVersion, null);
                    let serializationData = { responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(null);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {string} taskGroupId
    * @param {boolean} expanded
    */
    getTaskGroups(project, taskGroupId, expanded) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    taskGroupId: taskGroupId
                };
                let queryValues = {
                    expanded: expanded,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "6c08ffbf-dbf1-4f9a-94e5-a1cbd47005e7", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {TaskAgentInterfaces.TaskGroup} taskGroup
    * @param {string} project - Project ID or project name
    */
    updateTaskGroup(taskGroup, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "6c08ffbf-dbf1-4f9a-94e5-a1cbd47005e7", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.replace(url, apiVersion, taskGroup, null);
                    let serializationData = { responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} taskId
    */
    deleteTaskDefinition(taskId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    taskId: taskId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "60aac929-f0cd-4bc8-9ce4-6b30e8f1b1bd", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.del(url, apiVersion, null);
                    let serializationData = { responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(null);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} taskId
    * @param {string} versionString
    * @param {string[]} visibility
    * @param {boolean} scopeLocal
    */
    getTaskContentZip(taskId, versionString, visibility, scopeLocal) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let onResult = (err, statusCode, task) => {
                    if (err) {
                        err.statusCode = statusCode;
                        reject(err);
                    }
                    else {
                        resolve(task);
                    }
                };
                let routeValues = {
                    taskId: taskId,
                    versionString: versionString
                };
                let queryValues = {
                    visibility: visibility,
                    scopeLocal: scopeLocal,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "60aac929-f0cd-4bc8-9ce4-6b30e8f1b1bd", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let accept = this.createAcceptHeader("application/zip", apiVersion);
                    this.httpClient.getStream(url, accept, onResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} taskId
    * @param {string} versionString
    * @param {string[]} visibility
    * @param {boolean} scopeLocal
    */
    getTaskDefinition(taskId, versionString, visibility, scopeLocal) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    taskId: taskId,
                    versionString: versionString
                };
                let queryValues = {
                    visibility: visibility,
                    scopeLocal: scopeLocal,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "60aac929-f0cd-4bc8-9ce4-6b30e8f1b1bd", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} taskId
    * @param {string[]} visibility
    * @param {boolean} scopeLocal
    */
    getTaskDefinitions(taskId, visibility, scopeLocal) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    taskId: taskId
                };
                let queryValues = {
                    visibility: visibility,
                    scopeLocal: scopeLocal,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "60aac929-f0cd-4bc8-9ce4-6b30e8f1b1bd", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {{ [key: string] : string; }} userCapabilities
    * @param {number} poolId
    * @param {number} agentId
    */
    updateAgentUserCapabilities(userCapabilities, poolId, agentId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    poolId: poolId,
                    agentId: agentId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "30ba3ada-fedf-4da8-bbb5-dacf2f82e176", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.replace(url, apiVersion, userCapabilities, null);
                    let serializationData = { responseTypeMetadata: TaskAgentInterfaces.TypeInfo.TaskAgent, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {TaskAgentInterfaces.VariableGroup} group
    * @param {string} project - Project ID or project name
    */
    addVariableGroup(group, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "f5b09dd5-9d54-45a1-8b5a-1c8287d634cc", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.create(url, apiVersion, group, null);
                    let serializationData = { requestTypeMetadata: TaskAgentInterfaces.TypeInfo.VariableGroup, responseTypeMetadata: TaskAgentInterfaces.TypeInfo.VariableGroup, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {number} groupId
    */
    deleteVariableGroup(project, groupId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    groupId: groupId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "f5b09dd5-9d54-45a1-8b5a-1c8287d634cc", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.del(url, apiVersion, null);
                    let serializationData = { responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(null);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {number} groupId
    */
    getVariableGroup(project, groupId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    groupId: groupId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "f5b09dd5-9d54-45a1-8b5a-1c8287d634cc", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: TaskAgentInterfaces.TypeInfo.VariableGroup, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {string} groupName
    * @param {TaskAgentInterfaces.VariableGroupActionFilter} actionFilter
    */
    getVariableGroups(project, groupName, actionFilter) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project
                };
                let queryValues = {
                    groupName: groupName,
                    actionFilter: actionFilter,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "f5b09dd5-9d54-45a1-8b5a-1c8287d634cc", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: TaskAgentInterfaces.TypeInfo.VariableGroup, responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {number[]} groupIds
    */
    getVariableGroupsById(project, groupIds) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project
                };
                let queryValues = {
                    groupIds: groupIds && groupIds.join(","),
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "f5b09dd5-9d54-45a1-8b5a-1c8287d634cc", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: TaskAgentInterfaces.TypeInfo.VariableGroup, responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {TaskAgentInterfaces.VariableGroup} group
    * @param {string} project - Project ID or project name
    * @param {number} groupId
    */
    updateVariableGroup(group, project, groupId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    groupId: groupId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "distributedtask", "f5b09dd5-9d54-45a1-8b5a-1c8287d634cc", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.replace(url, apiVersion, group, null);
                    let serializationData = { requestTypeMetadata: TaskAgentInterfaces.TypeInfo.VariableGroup, responseTypeMetadata: TaskAgentInterfaces.TypeInfo.VariableGroup, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
}
exports.TaskAgentApiBase = TaskAgentApiBase;
