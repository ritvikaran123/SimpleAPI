/*
* ---------------------------------------------------------
* Copyright(C) Microsoft Corporation. All rights reserved.
* ---------------------------------------------------------
*
* ---------------------------------------------------------
* Generated file, DO NOT EDIT
* ---------------------------------------------------------
*/
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const basem = require("./ClientApiBases");
const serm = require("./Serialization");
const ReleaseInterfaces = require("./interfaces/ReleaseInterfaces");
class ReleaseApi extends basem.ClientApiBase {
    constructor(baseUrl, handlers) {
        super(baseUrl, handlers, 'node-Release-api');
    }
    /**
    * Returns the artifact details that automation agent requires
    *
    * @param {string} project - Project ID or project name
    * @param {number} releaseId
    */
    getAgentArtifactDefinitions(project, releaseId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    releaseId: releaseId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "Release", "f2571c27-bf50-4938-b396-32d109ddef26", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: ReleaseInterfaces.TypeInfo.AgentArtifactDefinition, responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {number} approvalStepId
    */
    getApprovalHistory(project, approvalStepId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    approvalStepId: approvalStepId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "Release", "250c7158-852e-4130-a00f-a0cce9b72d05", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: ReleaseInterfaces.TypeInfo.ReleaseApproval, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {number} approvalId
    * @param {boolean} includeHistory
    */
    getApproval(project, approvalId, includeHistory) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    approvalId: approvalId
                };
                let queryValues = {
                    includeHistory: includeHistory,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "Release", "9328e074-59fb-465a-89d9-b09c82ee5109", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: ReleaseInterfaces.TypeInfo.ReleaseApproval, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {ReleaseInterfaces.ReleaseApproval} approval
    * @param {string} project - Project ID or project name
    * @param {number} approvalId
    */
    updateReleaseApproval(approval, project, approvalId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    approvalId: approvalId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "Release", "9328e074-59fb-465a-89d9-b09c82ee5109", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.update(url, apiVersion, approval, null);
                    let serializationData = { requestTypeMetadata: ReleaseInterfaces.TypeInfo.ReleaseApproval, responseTypeMetadata: ReleaseInterfaces.TypeInfo.ReleaseApproval, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {string} assignedToFilter
    * @param {ReleaseInterfaces.ApprovalStatus} statusFilter
    * @param {number[]} releaseIdsFilter
    * @param {ReleaseInterfaces.ApprovalType} typeFilter
    * @param {number} top
    * @param {number} continuationToken
    * @param {ReleaseInterfaces.ReleaseQueryOrder} queryOrder
    * @param {boolean} includeMyGroupApprovals
    */
    getApprovals(project, assignedToFilter, statusFilter, releaseIdsFilter, typeFilter, top, continuationToken, queryOrder, includeMyGroupApprovals) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project
                };
                let queryValues = {
                    assignedToFilter: assignedToFilter,
                    statusFilter: statusFilter,
                    releaseIdsFilter: releaseIdsFilter && releaseIdsFilter.join(","),
                    typeFilter: typeFilter,
                    top: top,
                    continuationToken: continuationToken,
                    queryOrder: queryOrder,
                    includeMyGroupApprovals: includeMyGroupApprovals,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.2", "Release", "b47c6458-e73b-47cb-a770-4df1e8813a91", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: ReleaseInterfaces.TypeInfo.ReleaseApproval, responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {number} releaseId
    * @param {number} baseReleaseId
    * @param {number} top
    */
    getReleaseChanges(project, releaseId, baseReleaseId, top) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    releaseId: releaseId
                };
                let queryValues = {
                    baseReleaseId: baseReleaseId,
                    '$top': top,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "Release", "8dcf9fe9-ca37-4113-8ee1-37928e98407c", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: ReleaseInterfaces.TypeInfo.Change, responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {ReleaseInterfaces.ContinuousDeploymentSetupData} configData
    * @param {string} project - Project ID or project name
    */
    setupContinuousDeployment(configData, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.2", "Release", "c5788899-1e84-439b-b5f9-dbc10ecffe24", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.create(url, apiVersion, configData, null);
                    let serializationData = { requestTypeMetadata: ReleaseInterfaces.TypeInfo.ContinuousDeploymentSetupData, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {ReleaseInterfaces.ReleaseDefinition} releaseDefinition
    * @param {string} project - Project ID or project name
    */
    createReleaseDefinition(releaseDefinition, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.3", "Release", "d8f96f24-8ea7-4cb6-baab-2df8fc515665", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.create(url, apiVersion, releaseDefinition, null);
                    let serializationData = { requestTypeMetadata: ReleaseInterfaces.TypeInfo.ReleaseDefinition, responseTypeMetadata: ReleaseInterfaces.TypeInfo.ReleaseDefinition, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {number} definitionId
    */
    deleteReleaseDefinition(project, definitionId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    definitionId: definitionId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.3", "Release", "d8f96f24-8ea7-4cb6-baab-2df8fc515665", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.del(url, apiVersion, null);
                    let serializationData = { responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(null);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {number} definitionId
    */
    getReleaseDefinition(project, definitionId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    definitionId: definitionId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.3", "Release", "d8f96f24-8ea7-4cb6-baab-2df8fc515665", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: ReleaseInterfaces.TypeInfo.ReleaseDefinition, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {number} definitionId
    * @param {number} revision
    */
    getReleaseDefinitionRevision(project, definitionId, revision) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let onResult = (err, statusCode, definition) => {
                    if (err) {
                        err.statusCode = statusCode;
                        reject(err);
                    }
                    else {
                        resolve(definition);
                    }
                };
                let routeValues = {
                    project: project,
                    definitionId: definitionId
                };
                let queryValues = {
                    revision: revision,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.3", "Release", "d8f96f24-8ea7-4cb6-baab-2df8fc515665", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let accept = this.createAcceptHeader("text/plain", apiVersion);
                    this.httpClient.getStream(url, accept, onResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {string} searchText
    * @param {ReleaseInterfaces.ReleaseDefinitionExpands} expand
    * @param {number} top
    * @param {string} continuationToken
    * @param {ReleaseInterfaces.ReleaseDefinitionQueryOrder} queryOrder
    */
    getReleaseDefinitions(project, searchText, expand, top, continuationToken, queryOrder) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project
                };
                let queryValues = {
                    searchText: searchText,
                    '$expand': expand,
                    '$top': top,
                    continuationToken: continuationToken,
                    queryOrder: queryOrder,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.3", "Release", "d8f96f24-8ea7-4cb6-baab-2df8fc515665", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: ReleaseInterfaces.TypeInfo.ReleaseDefinition, responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {string} artifactType
    * @param {string} artifactSourceId
    * @param {ReleaseInterfaces.ReleaseDefinitionExpands} expand
    */
    getReleaseDefinitionsForArtifactSource(project, artifactType, artifactSourceId, expand) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project
                };
                let queryValues = {
                    artifactType: artifactType,
                    artifactSourceId: artifactSourceId,
                    '$expand': expand,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.3", "Release", "d8f96f24-8ea7-4cb6-baab-2df8fc515665", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: ReleaseInterfaces.TypeInfo.ReleaseDefinition, responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {ReleaseInterfaces.ReleaseDefinition} releaseDefinition
    * @param {string} project - Project ID or project name
    */
    updateReleaseDefinition(releaseDefinition, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.3", "Release", "d8f96f24-8ea7-4cb6-baab-2df8fc515665", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.replace(url, apiVersion, releaseDefinition, null);
                    let serializationData = { requestTypeMetadata: ReleaseInterfaces.TypeInfo.ReleaseDefinition, responseTypeMetadata: ReleaseInterfaces.TypeInfo.ReleaseDefinition, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {number} definitionId
    * @param {number} definitionEnvironmentId
    * @param {string} createdBy
    * @param {Date} minModifiedTime
    * @param {Date} maxModifiedTime
    * @param {ReleaseInterfaces.DeploymentStatus} deploymentStatus
    * @param {ReleaseInterfaces.DeploymentOperationStatus} operationStatus
    * @param {boolean} latestAttemptsOnly
    * @param {ReleaseInterfaces.ReleaseQueryOrder} queryOrder
    * @param {number} top
    * @param {number} continuationToken
    */
    getDeployments(project, definitionId, definitionEnvironmentId, createdBy, minModifiedTime, maxModifiedTime, deploymentStatus, operationStatus, latestAttemptsOnly, queryOrder, top, continuationToken) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project
                };
                let queryValues = {
                    definitionId: definitionId,
                    definitionEnvironmentId: definitionEnvironmentId,
                    createdBy: createdBy,
                    minModifiedTime: minModifiedTime,
                    maxModifiedTime: maxModifiedTime,
                    deploymentStatus: deploymentStatus,
                    operationStatus: operationStatus,
                    latestAttemptsOnly: latestAttemptsOnly,
                    queryOrder: queryOrder,
                    '$top': top,
                    continuationToken: continuationToken,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "Release", "b005ef73-cddc-448e-9ba2-5193bf36b19f", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: ReleaseInterfaces.TypeInfo.Deployment, responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {ReleaseInterfaces.DeploymentQueryParameters} queryParameters
    * @param {string} project - Project ID or project name
    */
    getDeploymentsForMultipleEnvironments(queryParameters, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "Release", "b005ef73-cddc-448e-9ba2-5193bf36b19f", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.create(url, apiVersion, queryParameters, null);
                    let serializationData = { requestTypeMetadata: ReleaseInterfaces.TypeInfo.DeploymentQueryParameters, responseTypeMetadata: ReleaseInterfaces.TypeInfo.Deployment, responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {number} releaseId
    * @param {number} environmentId
    */
    getReleaseEnvironment(project, releaseId, environmentId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    releaseId: releaseId,
                    environmentId: environmentId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.4", "Release", "a7e426b1-03dc-48af-9dfe-c98bac612dcb", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: ReleaseInterfaces.TypeInfo.ReleaseEnvironment, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {ReleaseInterfaces.ReleaseEnvironmentUpdateMetadata} environmentUpdateData
    * @param {string} project - Project ID or project name
    * @param {number} releaseId
    * @param {number} environmentId
    */
    updateReleaseEnvironment(environmentUpdateData, project, releaseId, environmentId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    releaseId: releaseId,
                    environmentId: environmentId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.4", "Release", "a7e426b1-03dc-48af-9dfe-c98bac612dcb", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.update(url, apiVersion, environmentUpdateData, null);
                    let serializationData = { requestTypeMetadata: ReleaseInterfaces.TypeInfo.ReleaseEnvironmentUpdateMetadata, responseTypeMetadata: ReleaseInterfaces.TypeInfo.ReleaseEnvironment, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {ReleaseInterfaces.ReleaseDefinitionEnvironmentTemplate} template
    * @param {string} project - Project ID or project name
    */
    createDefinitionEnvironmentTemplate(template, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.2", "Release", "6b03b696-824e-4479-8eb2-6644a51aba89", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.create(url, apiVersion, template, null);
                    let serializationData = { requestTypeMetadata: ReleaseInterfaces.TypeInfo.ReleaseDefinitionEnvironmentTemplate, responseTypeMetadata: ReleaseInterfaces.TypeInfo.ReleaseDefinitionEnvironmentTemplate, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {string} templateId
    */
    deleteDefinitionEnvironmentTemplate(project, templateId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project
                };
                let queryValues = {
                    templateId: templateId,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.2", "Release", "6b03b696-824e-4479-8eb2-6644a51aba89", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.del(url, apiVersion, null);
                    let serializationData = { responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(null);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {string} templateId
    */
    getDefinitionEnvironmentTemplate(project, templateId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project
                };
                let queryValues = {
                    templateId: templateId,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.2", "Release", "6b03b696-824e-4479-8eb2-6644a51aba89", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: ReleaseInterfaces.TypeInfo.ReleaseDefinitionEnvironmentTemplate, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    */
    listDefinitionEnvironmentTemplates(project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.2", "Release", "6b03b696-824e-4479-8eb2-6644a51aba89", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: ReleaseInterfaces.TypeInfo.ReleaseDefinitionEnvironmentTemplate, responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {ReleaseInterfaces.FavoriteItem[]} favoriteItems
    * @param {string} project - Project ID or project name
    * @param {string} scope
    * @param {string} identityId
    */
    createFavorites(favoriteItems, project, scope, identityId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    scope: scope
                };
                let queryValues = {
                    identityId: identityId,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "Release", "938f7222-9acb-48fe-b8a3-4eda04597171", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.create(url, apiVersion, favoriteItems, null);
                    let serializationData = { responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {string} scope
    * @param {string} identityId
    * @param {string} favoriteItemIds
    */
    deleteFavorites(project, scope, identityId, favoriteItemIds) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    scope: scope
                };
                let queryValues = {
                    identityId: identityId,
                    favoriteItemIds: favoriteItemIds,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "Release", "938f7222-9acb-48fe-b8a3-4eda04597171", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.del(url, apiVersion, null);
                    let serializationData = { responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(null);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {string} scope
    * @param {string} identityId
    */
    getFavorites(project, scope, identityId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    scope: scope
                };
                let queryValues = {
                    identityId: identityId,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "Release", "938f7222-9acb-48fe-b8a3-4eda04597171", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {number} releaseId
    */
    getReleaseHistory(project, releaseId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    releaseId: releaseId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "Release", "23f461c8-629a-4144-a076-3054fa5f268a", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: ReleaseInterfaces.TypeInfo.ReleaseRevision, responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {FormInputInterfaces.InputValuesQuery} query
    * @param {string} project - Project ID or project name
    */
    getInputValues(query, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "Release", "71dd499b-317d-45ea-9134-140ea1932b5e", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.create(url, apiVersion, query, null);
                    let serializationData = { responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {number} releaseId
    * @param {number} environmentId
    * @param {number} taskId
    * @param {number} attemptId
    */
    getLog(project, releaseId, environmentId, taskId, attemptId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let onResult = (err, statusCode, log) => {
                    if (err) {
                        err.statusCode = statusCode;
                        reject(err);
                    }
                    else {
                        resolve(log);
                    }
                };
                let routeValues = {
                    project: project,
                    releaseId: releaseId,
                    environmentId: environmentId,
                    taskId: taskId
                };
                let queryValues = {
                    attemptId: attemptId,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "Release", "e71ba1ed-c0a4-4a28-a61f-2dd5f68cf3fd", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let accept = this.createAcceptHeader("text/plain", apiVersion);
                    this.httpClient.getStream(url, accept, onResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {number} releaseId
    */
    getLogs(project, releaseId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let onResult = (err, statusCode, log) => {
                    if (err) {
                        err.statusCode = statusCode;
                        reject(err);
                    }
                    else {
                        resolve(log);
                    }
                };
                let routeValues = {
                    project: project,
                    releaseId: releaseId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.2", "Release", "c37fbab5-214b-48e4-a55b-cb6b4f6e4038", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let accept = this.createAcceptHeader("application/zip", apiVersion);
                    this.httpClient.getStream(url, accept, onResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {number} releaseId
    * @param {number} environmentId
    * @param {number} releaseDeployPhaseId
    * @param {number} taskId
    */
    getTaskLog(project, releaseId, environmentId, releaseDeployPhaseId, taskId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let onResult = (err, statusCode, log) => {
                    if (err) {
                        err.statusCode = statusCode;
                        reject(err);
                    }
                    else {
                        resolve(log);
                    }
                };
                let routeValues = {
                    project: project,
                    releaseId: releaseId,
                    environmentId: environmentId,
                    releaseDeployPhaseId: releaseDeployPhaseId,
                    taskId: taskId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.2", "Release", "17c91af7-09fd-4256-bff1-c24ee4f73bc0", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let accept = this.createAcceptHeader("text/plain", apiVersion);
                    this.httpClient.getStream(url, accept, onResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {number} releaseId
    * @param {number} manualInterventionId
    */
    getManualIntervention(project, releaseId, manualInterventionId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    releaseId: releaseId,
                    manualInterventionId: manualInterventionId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "Release", "616c46e4-f370-4456-adaa-fbaf79c7b79e", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: ReleaseInterfaces.TypeInfo.ManualIntervention, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {number} releaseId
    */
    getManualInterventions(project, releaseId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    releaseId: releaseId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "Release", "616c46e4-f370-4456-adaa-fbaf79c7b79e", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: ReleaseInterfaces.TypeInfo.ManualIntervention, responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {ReleaseInterfaces.ManualInterventionUpdateMetadata} manualInterventionUpdateMetadata
    * @param {string} project - Project ID or project name
    * @param {number} releaseId
    * @param {number} manualInterventionId
    */
    updateManualIntervention(manualInterventionUpdateMetadata, project, releaseId, manualInterventionId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    releaseId: releaseId,
                    manualInterventionId: manualInterventionId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "Release", "616c46e4-f370-4456-adaa-fbaf79c7b79e", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.update(url, apiVersion, manualInterventionUpdateMetadata, null);
                    let serializationData = { requestTypeMetadata: ReleaseInterfaces.TypeInfo.ManualInterventionUpdateMetadata, responseTypeMetadata: ReleaseInterfaces.TypeInfo.ManualIntervention, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {Date} minMetricsTime
    */
    getMetrics(project, minMetricsTime) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project
                };
                let queryValues = {
                    minMetricsTime: minMetricsTime,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "Release", "cd1502bb-3c73-4e11-80a6-d11308dceae5", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} artifactType
    * @param {string} artifactSourceId
    */
    getReleaseProjects(artifactType, artifactSourceId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {};
                let queryValues = {
                    artifactType: artifactType,
                    artifactSourceId: artifactSourceId,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "Release", "917ace4a-79d1-45a7-987c-7be4db4268fa", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {number} definitionId
    * @param {number} definitionEnvironmentId
    * @param {string} searchText
    * @param {string} createdBy
    * @param {ReleaseInterfaces.ReleaseStatus} statusFilter
    * @param {number} environmentStatusFilter
    * @param {Date} minCreatedTime
    * @param {Date} maxCreatedTime
    * @param {ReleaseInterfaces.ReleaseQueryOrder} queryOrder
    * @param {number} top
    * @param {number} continuationToken
    * @param {ReleaseInterfaces.ReleaseExpands} expand
    * @param {string} artifactTypeId
    * @param {string} sourceId
    * @param {string} artifactVersionId
    * @param {string} sourceBranchFilter
    * @param {boolean} isDeleted
    */
    getReleases(project, definitionId, definitionEnvironmentId, searchText, createdBy, statusFilter, environmentStatusFilter, minCreatedTime, maxCreatedTime, queryOrder, top, continuationToken, expand, artifactTypeId, sourceId, artifactVersionId, sourceBranchFilter, isDeleted) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project
                };
                let queryValues = {
                    definitionId: definitionId,
                    definitionEnvironmentId: definitionEnvironmentId,
                    searchText: searchText,
                    createdBy: createdBy,
                    statusFilter: statusFilter,
                    environmentStatusFilter: environmentStatusFilter,
                    minCreatedTime: minCreatedTime,
                    maxCreatedTime: maxCreatedTime,
                    queryOrder: queryOrder,
                    '$top': top,
                    continuationToken: continuationToken,
                    '$expand': expand,
                    artifactTypeId: artifactTypeId,
                    sourceId: sourceId,
                    artifactVersionId: artifactVersionId,
                    sourceBranchFilter: sourceBranchFilter,
                    isDeleted: isDeleted,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.4", "Release", "a166fde7-27ad-408e-ba75-703c2cc9d500", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: ReleaseInterfaces.TypeInfo.Release, responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {ReleaseInterfaces.ReleaseStartMetadata} releaseStartMetadata
    * @param {string} project - Project ID or project name
    */
    createRelease(releaseStartMetadata, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.4", "Release", "a166fde7-27ad-408e-ba75-703c2cc9d500", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.create(url, apiVersion, releaseStartMetadata, null);
                    let serializationData = { requestTypeMetadata: ReleaseInterfaces.TypeInfo.ReleaseStartMetadata, responseTypeMetadata: ReleaseInterfaces.TypeInfo.Release, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {number} releaseId
    * @param {string} comment
    */
    deleteRelease(project, releaseId, comment) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    releaseId: releaseId
                };
                let queryValues = {
                    comment: comment,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.4", "Release", "a166fde7-27ad-408e-ba75-703c2cc9d500", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.del(url, apiVersion, null);
                    let serializationData = { responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(null);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {number} releaseId
    * @param {boolean} includeAllApprovals
    */
    getRelease(project, releaseId, includeAllApprovals) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    releaseId: releaseId
                };
                let queryValues = {
                    includeAllApprovals: includeAllApprovals,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.4", "Release", "a166fde7-27ad-408e-ba75-703c2cc9d500", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: ReleaseInterfaces.TypeInfo.Release, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {number} definitionId
    * @param {number} releaseCount
    * @param {boolean} includeArtifact
    * @param {number[]} definitionEnvironmentIdsFilter
    */
    getReleaseDefinitionSummary(project, definitionId, releaseCount, includeArtifact, definitionEnvironmentIdsFilter) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project
                };
                let queryValues = {
                    definitionId: definitionId,
                    releaseCount: releaseCount,
                    includeArtifact: includeArtifact,
                    definitionEnvironmentIdsFilter: definitionEnvironmentIdsFilter && definitionEnvironmentIdsFilter.join(","),
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.4", "Release", "a166fde7-27ad-408e-ba75-703c2cc9d500", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: ReleaseInterfaces.TypeInfo.ReleaseDefinitionSummary, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {number} releaseId
    * @param {number} definitionSnapshotRevision
    */
    getReleaseRevision(project, releaseId, definitionSnapshotRevision) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let onResult = (err, statusCode, release) => {
                    if (err) {
                        err.statusCode = statusCode;
                        reject(err);
                    }
                    else {
                        resolve(release);
                    }
                };
                let routeValues = {
                    project: project,
                    releaseId: releaseId
                };
                let queryValues = {
                    definitionSnapshotRevision: definitionSnapshotRevision,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.4", "Release", "a166fde7-27ad-408e-ba75-703c2cc9d500", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let accept = this.createAcceptHeader("text/plain", apiVersion);
                    this.httpClient.getStream(url, accept, onResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {number} releaseId
    * @param {string} comment
    */
    undeleteRelease(project, releaseId, comment) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    releaseId: releaseId
                };
                let queryValues = {
                    comment: comment,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.4", "Release", "a166fde7-27ad-408e-ba75-703c2cc9d500", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.replace(url, apiVersion, null, null);
                    let serializationData = { responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(null);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {ReleaseInterfaces.Release} release
    * @param {string} project - Project ID or project name
    * @param {number} releaseId
    */
    updateRelease(release, project, releaseId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    releaseId: releaseId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.4", "Release", "a166fde7-27ad-408e-ba75-703c2cc9d500", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.replace(url, apiVersion, release, null);
                    let serializationData = { requestTypeMetadata: ReleaseInterfaces.TypeInfo.Release, responseTypeMetadata: ReleaseInterfaces.TypeInfo.Release, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {ReleaseInterfaces.ReleaseUpdateMetadata} releaseUpdateMetadata
    * @param {string} project - Project ID or project name
    * @param {number} releaseId
    */
    updateReleaseResource(releaseUpdateMetadata, project, releaseId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    releaseId: releaseId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.4", "Release", "a166fde7-27ad-408e-ba75-703c2cc9d500", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.update(url, apiVersion, releaseUpdateMetadata, null);
                    let serializationData = { requestTypeMetadata: ReleaseInterfaces.TypeInfo.ReleaseUpdateMetadata, responseTypeMetadata: ReleaseInterfaces.TypeInfo.Release, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    */
    getReleaseSettings(project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "Release", "c63c3718-7cfd-41e0-b89b-81c1ca143437", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Updates the release settings
    *
    * @param {ReleaseInterfaces.ReleaseSettings} releaseSettings
    * @param {string} project - Project ID or project name
    */
    updateReleaseSettings(releaseSettings, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "Release", "c63c3718-7cfd-41e0-b89b-81c1ca143437", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.replace(url, apiVersion, releaseSettings, null);
                    let serializationData = { responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {number} definitionId
    * @param {number} revision
    */
    getDefinitionRevision(project, definitionId, revision) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let onResult = (err, statusCode, revision) => {
                    if (err) {
                        err.statusCode = statusCode;
                        reject(err);
                    }
                    else {
                        resolve(revision);
                    }
                };
                let routeValues = {
                    project: project,
                    definitionId: definitionId,
                    revision: revision
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "Release", "258b82e0-9d41-43f3-86d6-fef14ddd44bc", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let accept = this.createAcceptHeader("text/plain", apiVersion);
                    this.httpClient.getStream(url, accept, onResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {number} definitionId
    */
    getReleaseDefinitionHistory(project, definitionId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    definitionId: definitionId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "Release", "258b82e0-9d41-43f3-86d6-fef14ddd44bc", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: ReleaseInterfaces.TypeInfo.ReleaseDefinitionRevision, responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {number} releaseId
    */
    getSummaryMailSections(project, releaseId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    releaseId: releaseId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "Release", "224e92b2-8d13-4c14-b120-13d877c516f8", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: ReleaseInterfaces.TypeInfo.SummaryMailSection, responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {ReleaseInterfaces.MailMessage} mailMessage
    * @param {string} project - Project ID or project name
    * @param {number} releaseId
    */
    sendSummaryMail(mailMessage, project, releaseId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    releaseId: releaseId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "Release", "224e92b2-8d13-4c14-b120-13d877c516f8", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.create(url, apiVersion, mailMessage, null);
                    let serializationData = { requestTypeMetadata: ReleaseInterfaces.TypeInfo.MailMessage, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(null);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {number} definitionId
    */
    getSourceBranches(project, definitionId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    definitionId: definitionId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "Release", "0e5def23-78b3-461f-8198-1558f25041c8", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {number} releaseId
    * @param {number} environmentId
    * @param {number} attemptId
    */
    getTasks(project, releaseId, environmentId, attemptId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    releaseId: releaseId,
                    environmentId: environmentId
                };
                let queryValues = {
                    attemptId: attemptId,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "Release", "36b276e0-3c70-4320-a63c-1a2e1466a0d1", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: ReleaseInterfaces.TypeInfo.ReleaseTask, responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {number} releaseId
    * @param {number} environmentId
    * @param {number} releaseDeployPhaseId
    */
    getTasksForTaskGroup(project, releaseId, environmentId, releaseDeployPhaseId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    releaseId: releaseId,
                    environmentId: environmentId,
                    releaseDeployPhaseId: releaseDeployPhaseId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.2", "Release", "4259191d-4b0a-4409-9fb3-09f22ab9bc47", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: ReleaseInterfaces.TypeInfo.ReleaseTask, responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Returns throttled queue as per the task hub license of parallel releases
    *
    * @param {string} projectId
    * @param {number} releaseId
    */
    getQueuedReleases(projectId, releaseId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {};
                let queryValues = {
                    projectId: projectId,
                    releaseId: releaseId,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "Release", "cf6fc7ba-4ad9-403b-86e6-e372cd3b2327", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    */
    getArtifactTypeDefinitions(project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "Release", "8efc2a3c-1fc8-4f6d-9822-75e98cecb48f", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: ReleaseInterfaces.TypeInfo.ArtifactTypeDefinition, responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {number} releaseDefinitionId
    */
    getArtifactVersions(project, releaseDefinitionId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project
                };
                let queryValues = {
                    releaseDefinitionId: releaseDefinitionId,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "Release", "30fc787e-a9e0-4a07-9fbc-3e903aa051d2", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {ReleaseInterfaces.Artifact[]} artifacts
    * @param {string} project - Project ID or project name
    */
    getArtifactVersionsForSources(artifacts, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "Release", "30fc787e-a9e0-4a07-9fbc-3e903aa051d2", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.create(url, apiVersion, artifacts, null);
                    let serializationData = { responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {number} releaseId
    * @param {number} baseReleaseId
    * @param {number} top
    */
    getReleaseWorkItemsRefs(project, releaseId, baseReleaseId, top) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    releaseId: releaseId
                };
                let queryValues = {
                    baseReleaseId: baseReleaseId,
                    '$top': top,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "Release", "4f165cc0-875c-4768-b148-f12f78769fab", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
}
exports.ReleaseApi = ReleaseApi;
