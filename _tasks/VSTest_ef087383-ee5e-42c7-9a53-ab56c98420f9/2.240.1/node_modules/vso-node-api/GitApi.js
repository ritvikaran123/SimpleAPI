/*
* ---------------------------------------------------------
* Copyright(C) Microsoft Corporation. All rights reserved.
* ---------------------------------------------------------
*
* ---------------------------------------------------------
* Generated file, DO NOT EDIT
* ---------------------------------------------------------
*/
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const basem = require("./ClientApiBases");
const serm = require("./Serialization");
const GitInterfaces = require("./interfaces/GitInterfaces");
class GitApi extends basem.ClientApiBase {
    constructor(baseUrl, handlers) {
        super(baseUrl, handlers, 'node-Git-api');
    }
    /**
    * Gets a single blob.
    *
    * @param {string} repositoryId
    * @param {string} sha1
    * @param {string} project - Project ID or project name
    * @param {boolean} download
    * @param {string} fileName
    */
    getBlob(repositoryId, sha1, project, download, fileName) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId,
                    sha1: sha1
                };
                let queryValues = {
                    download: download,
                    fileName: fileName,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "7b28e929-2c99-405d-9c5c-6167a06e6816", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Gets a single blob.
    *
    * @param {string} repositoryId
    * @param {string} sha1
    * @param {string} project - Project ID or project name
    * @param {boolean} download
    * @param {string} fileName
    */
    getBlobContent(repositoryId, sha1, project, download, fileName) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let onResult = (err, statusCode, Blob) => {
                    if (err) {
                        err.statusCode = statusCode;
                        reject(err);
                    }
                    else {
                        resolve(Blob);
                    }
                };
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId,
                    sha1: sha1
                };
                let queryValues = {
                    download: download,
                    fileName: fileName,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "7b28e929-2c99-405d-9c5c-6167a06e6816", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let accept = this.createAcceptHeader("application/octet-stream", apiVersion);
                    this.httpClient.getStream(url, accept, onResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Gets one or more blobs in a zip file download.
    *
    * @param {string[]} blobIds
    * @param {string} repositoryId
    * @param {string} project - Project ID or project name
    * @param {string} filename
    */
    getBlobsZip(blobIds, repositoryId, project, filename) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let onResult = (err, statusCode, Blob) => {
                    if (err) {
                        err.statusCode = statusCode;
                        reject(err);
                    }
                    else {
                        resolve(Blob);
                    }
                };
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId
                };
                let queryValues = {
                    filename: filename,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "7b28e929-2c99-405d-9c5c-6167a06e6816", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let accept = this.createAcceptHeader("application/zip", apiVersion);
                    this.httpClient.getStream(url, accept, onResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Gets a single blob.
    *
    * @param {string} repositoryId
    * @param {string} sha1
    * @param {string} project - Project ID or project name
    * @param {boolean} download
    * @param {string} fileName
    */
    getBlobZip(repositoryId, sha1, project, download, fileName) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let onResult = (err, statusCode, Blob) => {
                    if (err) {
                        err.statusCode = statusCode;
                        reject(err);
                    }
                    else {
                        resolve(Blob);
                    }
                };
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId,
                    sha1: sha1
                };
                let queryValues = {
                    download: download,
                    fileName: fileName,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "7b28e929-2c99-405d-9c5c-6167a06e6816", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let accept = this.createAcceptHeader("application/zip", apiVersion);
                    this.httpClient.getStream(url, accept, onResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Retrieve statistics about a single branch.
    *
    * @param {string} repositoryId - Friendly name or guid of repository
    * @param {string} name - Name of the branch
    * @param {string} project - Project ID or project name
    * @param {GitInterfaces.GitVersionDescriptor} baseVersionDescriptor
    */
    getBranch(repositoryId, name, project, baseVersionDescriptor) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId
                };
                let queryValues = {
                    name: name,
                    baseVersionDescriptor: baseVersionDescriptor,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "d5b216de-d8d5-4d32-ae76-51df755b16d3", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitBranchStats, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Retrieve statistics about all branches within a repository.
    *
    * @param {string} repositoryId - Friendly name or guid of repository
    * @param {string} project - Project ID or project name
    * @param {GitInterfaces.GitVersionDescriptor} baseVersionDescriptor
    */
    getBranches(repositoryId, project, baseVersionDescriptor) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId
                };
                let queryValues = {
                    baseVersionDescriptor: baseVersionDescriptor,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "d5b216de-d8d5-4d32-ae76-51df755b16d3", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitBranchStats, responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Retrieve statistics for multiple commits
    *
    * @param {GitInterfaces.GitQueryBranchStatsCriteria} searchCriteria
    * @param {string} repositoryId - Friendly name or guid of repository
    * @param {string} project - Project ID or project name
    */
    getBranchStatsBatch(searchCriteria, repositoryId, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "d5b216de-d8d5-4d32-ae76-51df755b16d3", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.create(url, apiVersion, searchCriteria, null);
                    let serializationData = { requestTypeMetadata: GitInterfaces.TypeInfo.GitQueryBranchStatsCriteria, responseTypeMetadata: GitInterfaces.TypeInfo.GitBranchStats, responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Retrieve changes for a particular commit.
    *
    * @param {string} commitId - The id of the commit.
    * @param {string} repositoryId - The id or friendly name of the repository. To use the friendly name, projectId must also be specified.
    * @param {string} project - Project ID or project name
    * @param {number} top - The maximum number of changes to return.
    * @param {number} skip - The number of changes to skip.
    */
    getChanges(commitId, repositoryId, project, top, skip) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    commitId: commitId,
                    repositoryId: repositoryId
                };
                let queryValues = {
                    top: top,
                    skip: skip,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "5bf884f5-3e07-42e9-afb8-1b872267bf16", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitCommitChanges, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {GitInterfaces.GitAsyncRefOperationParameters} cherryPickToCreate
    * @param {string} project - Project ID or project name
    * @param {string} repositoryId
    */
    createCherryPick(cherryPickToCreate, project, repositoryId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "033bad68-9a14-43d1-90e0-59cb8856fef6", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.create(url, apiVersion, cherryPickToCreate, null);
                    let serializationData = { requestTypeMetadata: GitInterfaces.TypeInfo.GitAsyncRefOperationParameters, responseTypeMetadata: GitInterfaces.TypeInfo.GitCherryPick, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {number} cherryPickId
    * @param {string} repositoryId
    */
    getCherryPick(project, cherryPickId, repositoryId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    cherryPickId: cherryPickId,
                    repositoryId: repositoryId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "033bad68-9a14-43d1-90e0-59cb8856fef6", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitCherryPick, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {string} repositoryId
    * @param {string} refName
    */
    getCherryPickForRefName(project, repositoryId, refName) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId
                };
                let queryValues = {
                    refName: refName,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "033bad68-9a14-43d1-90e0-59cb8856fef6", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitCherryPick, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Retrieve a particular commit.
    *
    * @param {string} commitId - The id of the commit.
    * @param {string} repositoryId - The id or friendly name of the repository. To use the friendly name, projectId must also be specified.
    * @param {string} project - Project ID or project name
    * @param {number} changeCount - The number of changes to include in the result.
    */
    getCommit(commitId, repositoryId, project, changeCount) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    commitId: commitId,
                    repositoryId: repositoryId
                };
                let queryValues = {
                    changeCount: changeCount,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "c2570c3b-5b3f-41b8-98bf-5407bfde8d58", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitCommit, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Retrieve git commits for a project
    *
    * @param {string} repositoryId - The id or friendly name of the repository. To use the friendly name, projectId must also be specified.
    * @param {GitInterfaces.GitQueryCommitsCriteria} searchCriteria
    * @param {string} project - Project ID or project name
    * @param {number} skip
    * @param {number} top
    */
    getCommits(repositoryId, searchCriteria, project, skip, top) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId
                };
                let queryValues = {
                    searchCriteria: searchCriteria,
                    '$skip': skip,
                    '$top': top,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "c2570c3b-5b3f-41b8-98bf-5407bfde8d58", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitCommitRef, responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Retrieve a list of commits associated with a particular push.
    *
    * @param {string} repositoryId - The id or friendly name of the repository. To use the friendly name, projectId must also be specified.
    * @param {number} pushId - The id of the push.
    * @param {string} project - Project ID or project name
    * @param {number} top - The maximum number of commits to return ("get the top x commits").
    * @param {number} skip - The number of commits to skip.
    * @param {boolean} includeLinks
    */
    getPushCommits(repositoryId, pushId, project, top, skip, includeLinks) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId
                };
                let queryValues = {
                    pushId: pushId,
                    top: top,
                    skip: skip,
                    includeLinks: includeLinks,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "c2570c3b-5b3f-41b8-98bf-5407bfde8d58", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitCommitRef, responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Retrieve git commits for a project
    *
    * @param {GitInterfaces.GitQueryCommitsCriteria} searchCriteria - Search options
    * @param {string} repositoryId - The id or friendly name of the repository. To use the friendly name, projectId must also be specified.
    * @param {string} project - Project ID or project name
    * @param {number} skip
    * @param {number} top
    * @param {boolean} includeStatuses
    */
    getCommitsBatch(searchCriteria, repositoryId, project, skip, top, includeStatuses) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId
                };
                let queryValues = {
                    '$skip': skip,
                    '$top': top,
                    includeStatuses: includeStatuses,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "6400dfb2-0bcb-462b-b992-5a57f8f1416c", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.create(url, apiVersion, searchCriteria, null);
                    let serializationData = { requestTypeMetadata: GitInterfaces.TypeInfo.GitQueryCommitsCriteria, responseTypeMetadata: GitInterfaces.TypeInfo.GitCommitRef, responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Retrieve deleted git repositories.
    *
    * @param {string} project - Project ID or project name
    */
    getDeletedRepositories(project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "2b6869c4-cb25-42b5-b7a3-0d3e6be0a11a", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitDeletedRepository, responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Create an import request
    *
    * @param {GitInterfaces.GitImportRequest} importRequest
    * @param {string} project - Project ID or project name
    * @param {string} repositoryId
    * @param {boolean} validateParameters
    */
    createImportRequest(importRequest, project, repositoryId, validateParameters) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId
                };
                let queryValues = {
                    validateParameters: validateParameters,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "01828ddc-3600-4a41-8633-99b3a73a0eb3", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.create(url, apiVersion, importRequest, null);
                    let serializationData = { requestTypeMetadata: GitInterfaces.TypeInfo.GitImportRequest, responseTypeMetadata: GitInterfaces.TypeInfo.GitImportRequest, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Retrieve a particular import request
    *
    * @param {string} project - Project ID or project name
    * @param {string} repositoryId
    * @param {number} importRequestId
    */
    getImportRequest(project, repositoryId, importRequestId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId,
                    importRequestId: importRequestId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "01828ddc-3600-4a41-8633-99b3a73a0eb3", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitImportRequest, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Retrieve import requests for a repository
    *
    * @param {string} project - Project ID or project name
    * @param {string} repositoryId
    * @param {boolean} includeAbandoned
    */
    queryImportRequests(project, repositoryId, includeAbandoned) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId
                };
                let queryValues = {
                    includeAbandoned: includeAbandoned,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "01828ddc-3600-4a41-8633-99b3a73a0eb3", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitImportRequest, responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Update an import request
    *
    * @param {GitInterfaces.GitImportRequest} importRequestToUpdate
    * @param {string} project - Project ID or project name
    * @param {string} repositoryId
    * @param {number} importRequestId
    */
    updateImportRequest(importRequestToUpdate, project, repositoryId, importRequestId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId,
                    importRequestId: importRequestId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "01828ddc-3600-4a41-8633-99b3a73a0eb3", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.update(url, apiVersion, importRequestToUpdate, null);
                    let serializationData = { requestTypeMetadata: GitInterfaces.TypeInfo.GitImportRequest, responseTypeMetadata: GitInterfaces.TypeInfo.GitImportRequest, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content which is always returned as a download.
    *
    * @param {string} repositoryId
    * @param {string} path
    * @param {string} project - Project ID or project name
    * @param {string} scopePath
    * @param {GitInterfaces.VersionControlRecursionType} recursionLevel
    * @param {boolean} includeContentMetadata
    * @param {boolean} latestProcessedChange
    * @param {boolean} download
    * @param {GitInterfaces.GitVersionDescriptor} versionDescriptor
    */
    getItem(repositoryId, path, project, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId
                };
                let queryValues = {
                    path: path,
                    scopePath: scopePath,
                    recursionLevel: recursionLevel,
                    includeContentMetadata: includeContentMetadata,
                    latestProcessedChange: latestProcessedChange,
                    download: download,
                    versionDescriptor: versionDescriptor,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "fb93c0db-47ed-4a31-8c20-47552878fb44", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitItem, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content which is always returned as a download.
    *
    * @param {string} repositoryId
    * @param {string} path
    * @param {string} project - Project ID or project name
    * @param {string} scopePath
    * @param {GitInterfaces.VersionControlRecursionType} recursionLevel
    * @param {boolean} includeContentMetadata
    * @param {boolean} latestProcessedChange
    * @param {boolean} download
    * @param {GitInterfaces.GitVersionDescriptor} versionDescriptor
    */
    getItemContent(repositoryId, path, project, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let onResult = (err, statusCode, Item) => {
                    if (err) {
                        err.statusCode = statusCode;
                        reject(err);
                    }
                    else {
                        resolve(Item);
                    }
                };
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId
                };
                let queryValues = {
                    path: path,
                    scopePath: scopePath,
                    recursionLevel: recursionLevel,
                    includeContentMetadata: includeContentMetadata,
                    latestProcessedChange: latestProcessedChange,
                    download: download,
                    versionDescriptor: versionDescriptor,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "fb93c0db-47ed-4a31-8c20-47552878fb44", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let accept = this.createAcceptHeader("application/octet-stream", apiVersion);
                    this.httpClient.getStream(url, accept, onResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Get Item Metadata and/or Content for a collection of items. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content which is always returned as a download.
    *
    * @param {string} repositoryId
    * @param {string} project - Project ID or project name
    * @param {string} scopePath
    * @param {GitInterfaces.VersionControlRecursionType} recursionLevel
    * @param {boolean} includeContentMetadata
    * @param {boolean} latestProcessedChange
    * @param {boolean} download
    * @param {boolean} includeLinks
    * @param {GitInterfaces.GitVersionDescriptor} versionDescriptor
    */
    getItems(repositoryId, project, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, includeLinks, versionDescriptor) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId
                };
                let queryValues = {
                    scopePath: scopePath,
                    recursionLevel: recursionLevel,
                    includeContentMetadata: includeContentMetadata,
                    latestProcessedChange: latestProcessedChange,
                    download: download,
                    includeLinks: includeLinks,
                    versionDescriptor: versionDescriptor,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "fb93c0db-47ed-4a31-8c20-47552878fb44", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitItem, responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content which is always returned as a download.
    *
    * @param {string} repositoryId
    * @param {string} path
    * @param {string} project - Project ID or project name
    * @param {string} scopePath
    * @param {GitInterfaces.VersionControlRecursionType} recursionLevel
    * @param {boolean} includeContentMetadata
    * @param {boolean} latestProcessedChange
    * @param {boolean} download
    * @param {GitInterfaces.GitVersionDescriptor} versionDescriptor
    */
    getItemText(repositoryId, path, project, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let onResult = (err, statusCode, Item) => {
                    if (err) {
                        err.statusCode = statusCode;
                        reject(err);
                    }
                    else {
                        resolve(Item);
                    }
                };
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId
                };
                let queryValues = {
                    path: path,
                    scopePath: scopePath,
                    recursionLevel: recursionLevel,
                    includeContentMetadata: includeContentMetadata,
                    latestProcessedChange: latestProcessedChange,
                    download: download,
                    versionDescriptor: versionDescriptor,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "fb93c0db-47ed-4a31-8c20-47552878fb44", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let accept = this.createAcceptHeader("text/plain", apiVersion);
                    this.httpClient.getStream(url, accept, onResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Get Item Metadata and/or Content for a single item. The download parameter is to indicate whether the content should be available as a download or just sent as a stream in the response. Doesn't apply to zipped content which is always returned as a download.
    *
    * @param {string} repositoryId
    * @param {string} path
    * @param {string} project - Project ID or project name
    * @param {string} scopePath
    * @param {GitInterfaces.VersionControlRecursionType} recursionLevel
    * @param {boolean} includeContentMetadata
    * @param {boolean} latestProcessedChange
    * @param {boolean} download
    * @param {GitInterfaces.GitVersionDescriptor} versionDescriptor
    */
    getItemZip(repositoryId, path, project, scopePath, recursionLevel, includeContentMetadata, latestProcessedChange, download, versionDescriptor) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let onResult = (err, statusCode, Item) => {
                    if (err) {
                        err.statusCode = statusCode;
                        reject(err);
                    }
                    else {
                        resolve(Item);
                    }
                };
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId
                };
                let queryValues = {
                    path: path,
                    scopePath: scopePath,
                    recursionLevel: recursionLevel,
                    includeContentMetadata: includeContentMetadata,
                    latestProcessedChange: latestProcessedChange,
                    download: download,
                    versionDescriptor: versionDescriptor,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "fb93c0db-47ed-4a31-8c20-47552878fb44", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let accept = this.createAcceptHeader("application/zip", apiVersion);
                    this.httpClient.getStream(url, accept, onResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Post for retrieving a creating a batch out of a set of items in a repo / project given a list of paths or a long path
    *
    * @param {GitInterfaces.GitItemRequestData} requestData
    * @param {string} repositoryId
    * @param {string} project - Project ID or project name
    */
    getItemsBatch(requestData, repositoryId, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "630fd2e4-fb88-4f85-ad21-13f3fd1fbca9", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.create(url, apiVersion, requestData, null);
                    let serializationData = { requestTypeMetadata: GitInterfaces.TypeInfo.GitItemRequestData, responseTypeMetadata: GitInterfaces.TypeInfo.GitItem, responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Create a new attachment
    *
    * @param {NodeJS.ReadableStream} contentStream - Content to upload
    * @param {string} fileName
    * @param {string} repositoryId
    * @param {number} pullRequestId
    * @param {string} project - Project ID or project name
    */
    createAttachment(customHeaders, contentStream, fileName, repositoryId, pullRequestId, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    fileName: fileName,
                    repositoryId: repositoryId,
                    pullRequestId: pullRequestId
                };
                customHeaders = customHeaders || {};
                customHeaders["Content-Type"] = "application/octet-stream";
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "965d9361-878b-413b-a494-45d5b5fd8ab7", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.uploadStream('POST', url, apiVersion, contentStream, customHeaders);
                    let serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.Attachment, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} fileName
    * @param {string} repositoryId
    * @param {number} pullRequestId
    * @param {string} project - Project ID or project name
    */
    deleteAttachment(fileName, repositoryId, pullRequestId, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    fileName: fileName,
                    repositoryId: repositoryId,
                    pullRequestId: pullRequestId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "965d9361-878b-413b-a494-45d5b5fd8ab7", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.del(url, apiVersion, null);
                    let serializationData = { responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(null);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} fileName
    * @param {string} repositoryId
    * @param {number} pullRequestId
    * @param {string} project - Project ID or project name
    */
    getAttachmentContent(fileName, repositoryId, pullRequestId, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let onResult = (err, statusCode, PullRequestAttachment) => {
                    if (err) {
                        err.statusCode = statusCode;
                        reject(err);
                    }
                    else {
                        resolve(PullRequestAttachment);
                    }
                };
                let routeValues = {
                    project: project,
                    fileName: fileName,
                    repositoryId: repositoryId,
                    pullRequestId: pullRequestId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "965d9361-878b-413b-a494-45d5b5fd8ab7", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let accept = this.createAcceptHeader("application/octet-stream", apiVersion);
                    this.httpClient.getStream(url, accept, onResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} repositoryId
    * @param {number} pullRequestId
    * @param {string} project - Project ID or project name
    */
    getAttachments(repositoryId, pullRequestId, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId,
                    pullRequestId: pullRequestId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "965d9361-878b-413b-a494-45d5b5fd8ab7", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.Attachment, responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} fileName
    * @param {string} repositoryId
    * @param {number} pullRequestId
    * @param {string} project - Project ID or project name
    */
    getAttachmentZip(fileName, repositoryId, pullRequestId, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let onResult = (err, statusCode, PullRequestAttachment) => {
                    if (err) {
                        err.statusCode = statusCode;
                        reject(err);
                    }
                    else {
                        resolve(PullRequestAttachment);
                    }
                };
                let routeValues = {
                    project: project,
                    fileName: fileName,
                    repositoryId: repositoryId,
                    pullRequestId: pullRequestId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "965d9361-878b-413b-a494-45d5b5fd8ab7", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let accept = this.createAcceptHeader("application/zip", apiVersion);
                    this.httpClient.getStream(url, accept, onResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Get the commits for an iteration.
    *
    * @param {string} repositoryId
    * @param {number} pullRequestId
    * @param {number} iterationId - Iteration to retrieve commits for
    * @param {string} project - Project ID or project name
    */
    getPullRequestIterationCommits(repositoryId, pullRequestId, iterationId, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId,
                    pullRequestId: pullRequestId,
                    iterationId: iterationId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "e7ea0883-095f-4926-b5fb-f24691c26fb9", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitCommitRef, responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Retrieve pull request's commits
    *
    * @param {string} repositoryId
    * @param {number} pullRequestId
    * @param {string} project - Project ID or project name
    */
    getPullRequestCommits(repositoryId, pullRequestId, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId,
                    pullRequestId: pullRequestId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "52823034-34a8-4576-922c-8d8b77e9e4c4", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitCommitRef, responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Retrieve one conflict for a pull request by ID
    *
    * @param {string} repositoryId
    * @param {number} pullRequestId
    * @param {number} conflictId
    * @param {string} project - Project ID or project name
    */
    getPullRequestConflict(repositoryId, pullRequestId, conflictId, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId,
                    pullRequestId: pullRequestId,
                    conflictId: conflictId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "d840fb74-bbef-42d3-b250-564604c054a4", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitConflict, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Retrieve all conflicts for a pull request
    *
    * @param {string} repositoryId
    * @param {number} pullRequestId
    * @param {string} project - Project ID or project name
    * @param {number} skip
    * @param {number} top
    * @param {boolean} includeObsolete
    */
    getPullRequestConflicts(repositoryId, pullRequestId, project, skip, top, includeObsolete) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId,
                    pullRequestId: pullRequestId
                };
                let queryValues = {
                    '$skip': skip,
                    '$top': top,
                    includeObsolete: includeObsolete,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "d840fb74-bbef-42d3-b250-564604c054a4", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitConflict, responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Update merge conflict resolution
    *
    * @param {GitInterfaces.GitConflict} conflict
    * @param {string} repositoryId
    * @param {number} pullRequestId
    * @param {number} conflictId
    * @param {string} project - Project ID or project name
    */
    updatePullRequestConflict(conflict, repositoryId, pullRequestId, conflictId, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId,
                    pullRequestId: pullRequestId,
                    conflictId: conflictId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "d840fb74-bbef-42d3-b250-564604c054a4", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.update(url, apiVersion, conflict, null);
                    let serializationData = { requestTypeMetadata: GitInterfaces.TypeInfo.GitConflict, responseTypeMetadata: GitInterfaces.TypeInfo.GitConflict, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} repositoryId
    * @param {number} pullRequestId
    * @param {number} iterationId
    * @param {string} project - Project ID or project name
    * @param {number} top
    * @param {number} skip
    * @param {number} compareTo
    */
    getPullRequestIterationChanges(repositoryId, pullRequestId, iterationId, project, top, skip, compareTo) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId,
                    pullRequestId: pullRequestId,
                    iterationId: iterationId
                };
                let queryValues = {
                    '$top': top,
                    '$skip': skip,
                    '$compareTo': compareTo,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "4216bdcf-b6b1-4d59-8b82-c34cc183fc8b", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitPullRequestIterationChanges, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} repositoryId
    * @param {number} pullRequestId
    * @param {number} iterationId
    * @param {string} project - Project ID or project name
    */
    getPullRequestIteration(repositoryId, pullRequestId, iterationId, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId,
                    pullRequestId: pullRequestId,
                    iterationId: iterationId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "d43911ee-6958-46b0-a42b-8445b8a0d004", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitPullRequestIteration, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} repositoryId
    * @param {number} pullRequestId
    * @param {string} project - Project ID or project name
    * @param {boolean} includeCommits
    */
    getPullRequestIterations(repositoryId, pullRequestId, project, includeCommits) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId,
                    pullRequestId: pullRequestId
                };
                let queryValues = {
                    includeCommits: includeCommits,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "d43911ee-6958-46b0-a42b-8445b8a0d004", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitPullRequestIteration, responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Query for pull requests
    *
    * @param {GitInterfaces.GitPullRequestQuery} queries
    * @param {string} repositoryId
    * @param {string} project - Project ID or project name
    */
    getPullRequestQuery(queries, repositoryId, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "b3a6eebe-9cf0-49ea-b6cb-1a4c5f5007b0", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.create(url, apiVersion, queries, null);
                    let serializationData = { requestTypeMetadata: GitInterfaces.TypeInfo.GitPullRequestQuery, responseTypeMetadata: GitInterfaces.TypeInfo.GitPullRequestQuery, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Adds a reviewer to a git pull request
    *
    * @param {GitInterfaces.IdentityRefWithVote} reviewer
    * @param {string} repositoryId
    * @param {number} pullRequestId
    * @param {string} reviewerId
    * @param {string} project - Project ID or project name
    */
    createPullRequestReviewer(reviewer, repositoryId, pullRequestId, reviewerId, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId,
                    pullRequestId: pullRequestId,
                    reviewerId: reviewerId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "4b6702c7-aa35-4b89-9c96-b9abf6d3e540", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.replace(url, apiVersion, reviewer, null);
                    let serializationData = { responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Adds reviewers to a git pull request
    *
    * @param {VSSInterfaces.IdentityRef[]} reviewers
    * @param {string} repositoryId
    * @param {number} pullRequestId
    * @param {string} project - Project ID or project name
    */
    createPullRequestReviewers(reviewers, repositoryId, pullRequestId, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId,
                    pullRequestId: pullRequestId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "4b6702c7-aa35-4b89-9c96-b9abf6d3e540", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.create(url, apiVersion, reviewers, null);
                    let serializationData = { responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Adds reviewers to a git pull request
    *
    * @param {string} repositoryId
    * @param {number} pullRequestId
    * @param {string} reviewerId
    * @param {string} project - Project ID or project name
    */
    deletePullRequestReviewer(repositoryId, pullRequestId, reviewerId, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId,
                    pullRequestId: pullRequestId,
                    reviewerId: reviewerId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "4b6702c7-aa35-4b89-9c96-b9abf6d3e540", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.del(url, apiVersion, null);
                    let serializationData = { responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(null);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Retrieve a reviewer from a pull request
    *
    * @param {string} repositoryId
    * @param {number} pullRequestId
    * @param {string} reviewerId
    * @param {string} project - Project ID or project name
    */
    getPullRequestReviewer(repositoryId, pullRequestId, reviewerId, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId,
                    pullRequestId: pullRequestId,
                    reviewerId: reviewerId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "4b6702c7-aa35-4b89-9c96-b9abf6d3e540", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Retrieve a pull request reviewers
    *
    * @param {string} repositoryId
    * @param {number} pullRequestId
    * @param {string} project - Project ID or project name
    */
    getPullRequestReviewers(repositoryId, pullRequestId, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId,
                    pullRequestId: pullRequestId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "4b6702c7-aa35-4b89-9c96-b9abf6d3e540", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Get a pull request using it's ID
    *
    * @param {number} pullRequestId - the Id of the pull request
    */
    getPullRequestById(pullRequestId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    pullRequestId: pullRequestId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "01a46dea-7d46-4d40-bc84-319e7c260d99", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitPullRequest, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Query pull requests by project
    *
    * @param {string} project - Project ID or project name
    * @param {GitInterfaces.GitPullRequestSearchCriteria} searchCriteria
    * @param {number} maxCommentLength
    * @param {number} skip
    * @param {number} top
    */
    getPullRequestsByProject(project, searchCriteria, maxCommentLength, skip, top) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project
                };
                let queryValues = {
                    searchCriteria: searchCriteria,
                    maxCommentLength: maxCommentLength,
                    '$skip': skip,
                    '$top': top,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "a5d28130-9cd2-40fa-9f08-902e7daa9efb", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitPullRequest, responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Create a git pull request
    *
    * @param {GitInterfaces.GitPullRequest} gitPullRequestToCreate
    * @param {string} repositoryId
    * @param {string} project - Project ID or project name
    */
    createPullRequest(gitPullRequestToCreate, repositoryId, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "9946fd70-0d40-406e-b686-b4744cbbcc37", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.create(url, apiVersion, gitPullRequestToCreate, null);
                    let serializationData = { requestTypeMetadata: GitInterfaces.TypeInfo.GitPullRequest, responseTypeMetadata: GitInterfaces.TypeInfo.GitPullRequest, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Retrieve a pull request
    *
    * @param {string} repositoryId
    * @param {number} pullRequestId
    * @param {string} project - Project ID or project name
    * @param {number} maxCommentLength
    * @param {number} skip
    * @param {number} top
    * @param {boolean} includeCommits
    * @param {boolean} includeWorkItemRefs
    */
    getPullRequest(repositoryId, pullRequestId, project, maxCommentLength, skip, top, includeCommits, includeWorkItemRefs) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId,
                    pullRequestId: pullRequestId
                };
                let queryValues = {
                    maxCommentLength: maxCommentLength,
                    '$skip': skip,
                    '$top': top,
                    includeCommits: includeCommits,
                    includeWorkItemRefs: includeWorkItemRefs,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "9946fd70-0d40-406e-b686-b4744cbbcc37", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitPullRequest, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Query for pull requests
    *
    * @param {string} repositoryId
    * @param {GitInterfaces.GitPullRequestSearchCriteria} searchCriteria
    * @param {string} project - Project ID or project name
    * @param {number} maxCommentLength
    * @param {number} skip
    * @param {number} top
    */
    getPullRequests(repositoryId, searchCriteria, project, maxCommentLength, skip, top) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId
                };
                let queryValues = {
                    searchCriteria: searchCriteria,
                    maxCommentLength: maxCommentLength,
                    '$skip': skip,
                    '$top': top,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "9946fd70-0d40-406e-b686-b4744cbbcc37", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitPullRequest, responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Updates a pull request
    *
    * @param {GitInterfaces.GitPullRequest} gitPullRequestToUpdate
    * @param {string} repositoryId
    * @param {number} pullRequestId
    * @param {string} project - Project ID or project name
    */
    updatePullRequest(gitPullRequestToUpdate, repositoryId, pullRequestId, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId,
                    pullRequestId: pullRequestId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "9946fd70-0d40-406e-b686-b4744cbbcc37", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.update(url, apiVersion, gitPullRequestToUpdate, null);
                    let serializationData = { requestTypeMetadata: GitInterfaces.TypeInfo.GitPullRequest, responseTypeMetadata: GitInterfaces.TypeInfo.GitPullRequest, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {GitInterfaces.ShareNotificationContext} userMessage
    * @param {string} repositoryId
    * @param {number} pullRequestId
    * @param {string} project - Project ID or project name
    */
    sharePullRequest(userMessage, repositoryId, pullRequestId, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId,
                    pullRequestId: pullRequestId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "696f3a82-47c9-487f-9117-b9d00972ca84", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.create(url, apiVersion, userMessage, null);
                    let serializationData = { responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(null);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Create a pull request iteration status
    *
    * @param {GitInterfaces.GitPullRequestStatus} status
    * @param {string} repositoryId
    * @param {number} pullRequestId
    * @param {number} iterationId
    * @param {string} project - Project ID or project name
    */
    createPullRequestIterationStatus(status, repositoryId, pullRequestId, iterationId, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId,
                    pullRequestId: pullRequestId,
                    iterationId: iterationId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "75cf11c5-979f-4038-a76e-058a06adf2bf", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.create(url, apiVersion, status, null);
                    let serializationData = { requestTypeMetadata: GitInterfaces.TypeInfo.GitPullRequestStatus, responseTypeMetadata: GitInterfaces.TypeInfo.GitPullRequestStatus, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Get the specific pull request iteration status.
    *
    * @param {string} repositoryId
    * @param {number} pullRequestId
    * @param {number} iterationId
    * @param {number} statusId
    * @param {string} project - Project ID or project name
    */
    getPullRequestIterationStatus(repositoryId, pullRequestId, iterationId, statusId, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId,
                    pullRequestId: pullRequestId,
                    iterationId: iterationId,
                    statusId: statusId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "75cf11c5-979f-4038-a76e-058a06adf2bf", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitPullRequestStatus, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Get all the statuses associated with a pull request iteration.
    *
    * @param {string} repositoryId
    * @param {number} pullRequestId
    * @param {number} iterationId
    * @param {string} project - Project ID or project name
    */
    getPullRequestIterationStatuses(repositoryId, pullRequestId, iterationId, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId,
                    pullRequestId: pullRequestId,
                    iterationId: iterationId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "75cf11c5-979f-4038-a76e-058a06adf2bf", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitPullRequestStatus, responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Create a pull request status
    *
    * @param {GitInterfaces.GitPullRequestStatus} status
    * @param {string} repositoryId
    * @param {number} pullRequestId
    * @param {string} project - Project ID or project name
    */
    createPullRequestStatus(status, repositoryId, pullRequestId, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId,
                    pullRequestId: pullRequestId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "b5f6bb4f-8d1e-4d79-8d11-4c9172c99c35", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.create(url, apiVersion, status, null);
                    let serializationData = { requestTypeMetadata: GitInterfaces.TypeInfo.GitPullRequestStatus, responseTypeMetadata: GitInterfaces.TypeInfo.GitPullRequestStatus, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Get the specific pull request status.
    *
    * @param {string} repositoryId
    * @param {number} pullRequestId
    * @param {number} statusId
    * @param {string} project - Project ID or project name
    */
    getPullRequestStatus(repositoryId, pullRequestId, statusId, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId,
                    pullRequestId: pullRequestId,
                    statusId: statusId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "b5f6bb4f-8d1e-4d79-8d11-4c9172c99c35", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitPullRequestStatus, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Get all the statuses associated with a pull request.
    *
    * @param {string} repositoryId
    * @param {number} pullRequestId
    * @param {string} project - Project ID or project name
    */
    getPullRequestStatuses(repositoryId, pullRequestId, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId,
                    pullRequestId: pullRequestId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "b5f6bb4f-8d1e-4d79-8d11-4c9172c99c35", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitPullRequestStatus, responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Create a pull request review comment
    *
    * @param {GitInterfaces.Comment} comment
    * @param {string} repositoryId
    * @param {number} pullRequestId
    * @param {number} threadId
    * @param {string} project - Project ID or project name
    */
    createComment(comment, repositoryId, pullRequestId, threadId, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId,
                    pullRequestId: pullRequestId,
                    threadId: threadId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "965a3ec7-5ed8-455a-bdcb-835a5ea7fe7b", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.create(url, apiVersion, comment, null);
                    let serializationData = { requestTypeMetadata: GitInterfaces.TypeInfo.Comment, responseTypeMetadata: GitInterfaces.TypeInfo.Comment, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Delete a pull request comment by id for a pull request
    *
    * @param {string} repositoryId
    * @param {number} pullRequestId
    * @param {number} threadId
    * @param {number} commentId
    * @param {string} project - Project ID or project name
    */
    deleteComment(repositoryId, pullRequestId, threadId, commentId, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId,
                    pullRequestId: pullRequestId,
                    threadId: threadId,
                    commentId: commentId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "965a3ec7-5ed8-455a-bdcb-835a5ea7fe7b", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.del(url, apiVersion, null);
                    let serializationData = { responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(null);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Get a pull request comment by id for a pull request
    *
    * @param {string} repositoryId
    * @param {number} pullRequestId
    * @param {number} threadId
    * @param {number} commentId
    * @param {string} project - Project ID or project name
    */
    getComment(repositoryId, pullRequestId, threadId, commentId, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId,
                    pullRequestId: pullRequestId,
                    threadId: threadId,
                    commentId: commentId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "965a3ec7-5ed8-455a-bdcb-835a5ea7fe7b", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.Comment, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Get all pull request comments in a thread.
    *
    * @param {string} repositoryId
    * @param {number} pullRequestId
    * @param {number} threadId
    * @param {string} project - Project ID or project name
    */
    getComments(repositoryId, pullRequestId, threadId, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId,
                    pullRequestId: pullRequestId,
                    threadId: threadId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "965a3ec7-5ed8-455a-bdcb-835a5ea7fe7b", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.Comment, responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Update a pull request review comment thread
    *
    * @param {GitInterfaces.Comment} comment
    * @param {string} repositoryId
    * @param {number} pullRequestId
    * @param {number} threadId
    * @param {number} commentId
    * @param {string} project - Project ID or project name
    */
    updateComment(comment, repositoryId, pullRequestId, threadId, commentId, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId,
                    pullRequestId: pullRequestId,
                    threadId: threadId,
                    commentId: commentId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "965a3ec7-5ed8-455a-bdcb-835a5ea7fe7b", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.update(url, apiVersion, comment, null);
                    let serializationData = { requestTypeMetadata: GitInterfaces.TypeInfo.Comment, responseTypeMetadata: GitInterfaces.TypeInfo.Comment, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Create a pull request review comment thread
    *
    * @param {GitInterfaces.GitPullRequestCommentThread} commentThread
    * @param {string} repositoryId
    * @param {number} pullRequestId
    * @param {string} project - Project ID or project name
    */
    createThread(commentThread, repositoryId, pullRequestId, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId,
                    pullRequestId: pullRequestId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "ab6e2e5d-a0b7-4153-b64a-a4efe0d49449", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.create(url, apiVersion, commentThread, null);
                    let serializationData = { requestTypeMetadata: GitInterfaces.TypeInfo.GitPullRequestCommentThread, responseTypeMetadata: GitInterfaces.TypeInfo.GitPullRequestCommentThread, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Get a pull request comment thread by id for a pull request
    *
    * @param {string} repositoryId
    * @param {number} pullRequestId
    * @param {number} threadId
    * @param {string} project - Project ID or project name
    * @param {number} iteration
    * @param {number} baseIteration
    */
    getPullRequestThread(repositoryId, pullRequestId, threadId, project, iteration, baseIteration) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId,
                    pullRequestId: pullRequestId,
                    threadId: threadId
                };
                let queryValues = {
                    '$iteration': iteration,
                    '$baseIteration': baseIteration,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "ab6e2e5d-a0b7-4153-b64a-a4efe0d49449", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitPullRequestCommentThread, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Get all pull request comment threads.
    *
    * @param {string} repositoryId
    * @param {number} pullRequestId
    * @param {string} project - Project ID or project name
    * @param {number} iteration
    * @param {number} baseIteration
    */
    getThreads(repositoryId, pullRequestId, project, iteration, baseIteration) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId,
                    pullRequestId: pullRequestId
                };
                let queryValues = {
                    '$iteration': iteration,
                    '$baseIteration': baseIteration,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "ab6e2e5d-a0b7-4153-b64a-a4efe0d49449", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitPullRequestCommentThread, responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Update a pull request review comment thread
    *
    * @param {GitInterfaces.GitPullRequestCommentThread} commentThread
    * @param {string} repositoryId
    * @param {number} pullRequestId
    * @param {number} threadId
    * @param {string} project - Project ID or project name
    */
    updateThread(commentThread, repositoryId, pullRequestId, threadId, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId,
                    pullRequestId: pullRequestId,
                    threadId: threadId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "ab6e2e5d-a0b7-4153-b64a-a4efe0d49449", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.update(url, apiVersion, commentThread, null);
                    let serializationData = { requestTypeMetadata: GitInterfaces.TypeInfo.GitPullRequestCommentThread, responseTypeMetadata: GitInterfaces.TypeInfo.GitPullRequestCommentThread, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Retrieve a pull request work items
    *
    * @param {string} repositoryId
    * @param {number} pullRequestId
    * @param {string} project - Project ID or project name
    */
    getPullRequestWorkItems(repositoryId, pullRequestId, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId,
                    pullRequestId: pullRequestId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "0a637fcc-5370-4ce8-b0e8-98091f5f9482", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Push changes to the repository.
    *
    * @param {GitInterfaces.GitPush} push
    * @param {string} repositoryId - The id or friendly name of the repository. To use the friendly name, a project-scoped route must be used.
    * @param {string} project - Project ID or project name
    */
    createPush(push, repositoryId, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.2", "git", "ea98d07b-3c87-4971-8ede-a613694ffb55", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.create(url, apiVersion, push, null);
                    let serializationData = { requestTypeMetadata: GitInterfaces.TypeInfo.GitPush, responseTypeMetadata: GitInterfaces.TypeInfo.GitPush, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Retrieve a particular push.
    *
    * @param {string} repositoryId - The id or friendly name of the repository. To use the friendly name, projectId must also be specified.
    * @param {number} pushId - The id of the push.
    * @param {string} project - Project ID or project name
    * @param {number} includeCommits - The number of commits to include in the result.
    * @param {boolean} includeRefUpdates
    */
    getPush(repositoryId, pushId, project, includeCommits, includeRefUpdates) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId,
                    pushId: pushId
                };
                let queryValues = {
                    includeCommits: includeCommits,
                    includeRefUpdates: includeRefUpdates,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.2", "git", "ea98d07b-3c87-4971-8ede-a613694ffb55", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitPush, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Retrieves pushes associated with the specified repository.
    *
    * @param {string} repositoryId - The id or friendly name of the repository. To use the friendly name, projectId must also be specified.
    * @param {string} project - Project ID or project name
    * @param {number} skip
    * @param {number} top
    * @param {GitInterfaces.GitPushSearchCriteria} searchCriteria
    */
    getPushes(repositoryId, project, skip, top, searchCriteria) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId
                };
                let queryValues = {
                    '$skip': skip,
                    '$top': top,
                    searchCriteria: searchCriteria,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.2", "git", "ea98d07b-3c87-4971-8ede-a613694ffb55", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitPush, responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Lock or unlock a ref.
    *
    * @param {GitInterfaces.GitRefLockRequest} refLockRequest
    * @param {string} project - Project ID or project name
    * @param {string} repositoryId
    */
    createRefLockRequest(refLockRequest, project, repositoryId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "32863ac0-6a8a-4d9f-8afe-ba293b93ec3c", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.create(url, apiVersion, refLockRequest, null);
                    let serializationData = { responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(null);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Queries the provided repository for its refs and returns them.
    *
    * @param {string} repositoryId - The id or friendly name of the repository. To use the friendly name, projectId must also be specified.
    * @param {string} project - Project ID or project name
    * @param {string} filter - [optional] A filter to apply to the refs.
    * @param {boolean} includeLinks - [optional] Specifies if referenceLinks should be included in the result. default is false.
    * @param {boolean} latestStatusesOnly
    */
    getRefs(repositoryId, project, filter, includeLinks, latestStatusesOnly) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId
                };
                let queryValues = {
                    filter: filter,
                    includeLinks: includeLinks,
                    latestStatusesOnly: latestStatusesOnly,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "2d874a60-a811-4f62-9c9f-963a6ea0a55b", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitRef, responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Creates or updates refs with the given information
    *
    * @param {GitInterfaces.GitRefUpdate[]} refUpdates - List of ref updates to attempt to perform
    * @param {string} repositoryId - The id or friendly name of the repository. To use the friendly name, projectId must also be specified.
    * @param {string} project - Project ID or project name
    * @param {string} projectId - The id of the project.
    */
    updateRefs(refUpdates, repositoryId, project, projectId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId
                };
                let queryValues = {
                    projectId: projectId,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "2d874a60-a811-4f62-9c9f-963a6ea0a55b", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.create(url, apiVersion, refUpdates, null);
                    let serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitRefUpdateResult, responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Creates a ref favorite
    *
    * @param {GitInterfaces.GitRefFavorite} favorite
    * @param {string} project - Project ID or project name
    */
    createFavorite(favorite, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "876f70af-5792-485a-a1c7-d0a7b2f42bbb", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.create(url, apiVersion, favorite, null);
                    let serializationData = { requestTypeMetadata: GitInterfaces.TypeInfo.GitRefFavorite, responseTypeMetadata: GitInterfaces.TypeInfo.GitRefFavorite, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {number} favoriteId
    */
    deleteRefFavorite(project, favoriteId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    favoriteId: favoriteId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "876f70af-5792-485a-a1c7-d0a7b2f42bbb", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.del(url, apiVersion, null);
                    let serializationData = { responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(null);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {number} favoriteId
    */
    getRefFavorite(project, favoriteId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    favoriteId: favoriteId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "876f70af-5792-485a-a1c7-d0a7b2f42bbb", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitRefFavorite, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Gets the refs favorites for a repo and an identity.
    *
    * @param {string} project - Project ID or project name
    * @param {string} repositoryId - The id of the repository.
    * @param {string} identityId - The id of the identity whose favorites are to be retrieved. If null, the requesting identity is used.
    */
    getRefFavorites(project, repositoryId, identityId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project
                };
                let queryValues = {
                    repositoryId: repositoryId,
                    identityId: identityId,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "876f70af-5792-485a-a1c7-d0a7b2f42bbb", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitRefFavorite, responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Create a git repository
    *
    * @param {GitInterfaces.GitRepository} gitRepositoryToCreate
    * @param {string} project - Project ID or project name
    */
    createRepository(gitRepositoryToCreate, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "225f7195-f9c7-4d14-ab28-a83f7ff77e1f", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.create(url, apiVersion, gitRepositoryToCreate, null);
                    let serializationData = { responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Delete a git repository
    *
    * @param {string} repositoryId
    * @param {string} project - Project ID or project name
    */
    deleteRepository(repositoryId, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "225f7195-f9c7-4d14-ab28-a83f7ff77e1f", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.del(url, apiVersion, null);
                    let serializationData = { responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(null);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Retrieve git repositories.
    *
    * @param {string} project - Project ID or project name
    * @param {boolean} includeLinks
    * @param {boolean} includeAllUrls
    */
    getRepositories(project, includeLinks, includeAllUrls) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project
                };
                let queryValues = {
                    includeLinks: includeLinks,
                    includeAllUrls: includeAllUrls,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "225f7195-f9c7-4d14-ab28-a83f7ff77e1f", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} repositoryId
    * @param {string} project - Project ID or project name
    */
    getRepository(repositoryId, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "225f7195-f9c7-4d14-ab28-a83f7ff77e1f", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Updates the Git repository with the single populated change in the specified repository information.
    *
    * @param {GitInterfaces.GitRepository} newRepositoryInfo
    * @param {string} repositoryId
    * @param {string} project - Project ID or project name
    */
    updateRepository(newRepositoryInfo, repositoryId, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "225f7195-f9c7-4d14-ab28-a83f7ff77e1f", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.update(url, apiVersion, newRepositoryInfo, null);
                    let serializationData = { responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {GitInterfaces.GitAsyncRefOperationParameters} revertToCreate
    * @param {string} project - Project ID or project name
    * @param {string} repositoryId
    */
    createRevert(revertToCreate, project, repositoryId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "bc866058-5449-4715-9cf1-a510b6ff193c", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.create(url, apiVersion, revertToCreate, null);
                    let serializationData = { requestTypeMetadata: GitInterfaces.TypeInfo.GitAsyncRefOperationParameters, responseTypeMetadata: GitInterfaces.TypeInfo.GitRevert, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {number} revertId
    * @param {string} repositoryId
    */
    getRevert(project, revertId, repositoryId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    revertId: revertId,
                    repositoryId: repositoryId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "bc866058-5449-4715-9cf1-a510b6ff193c", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitRevert, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} project - Project ID or project name
    * @param {string} repositoryId
    * @param {string} refName
    */
    getRevertForRefName(project, repositoryId, refName) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId
                };
                let queryValues = {
                    refName: refName,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "bc866058-5449-4715-9cf1-a510b6ff193c", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitRevert, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {GitInterfaces.GitStatus} gitCommitStatusToCreate
    * @param {string} commitId
    * @param {string} repositoryId
    * @param {string} project - Project ID or project name
    */
    createCommitStatus(gitCommitStatusToCreate, commitId, repositoryId, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    commitId: commitId,
                    repositoryId: repositoryId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "428dd4fb-fda5-4722-af02-9313b80305da", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.create(url, apiVersion, gitCommitStatusToCreate, null);
                    let serializationData = { requestTypeMetadata: GitInterfaces.TypeInfo.GitStatus, responseTypeMetadata: GitInterfaces.TypeInfo.GitStatus, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} commitId
    * @param {string} repositoryId
    * @param {string} project - Project ID or project name
    * @param {number} top
    * @param {number} skip
    * @param {boolean} latestOnly
    */
    getStatuses(commitId, repositoryId, project, top, skip, latestOnly) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    commitId: commitId,
                    repositoryId: repositoryId
                };
                let queryValues = {
                    top: top,
                    skip: skip,
                    latestOnly: latestOnly,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "428dd4fb-fda5-4722-af02-9313b80305da", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitStatus, responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * Retrieve a set of suggestions (including a pull request suggestion).
    *
    * @param {string} repositoryId
    * @param {string} project - Project ID or project name
    */
    getSuggestions(repositoryId, project) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "9393b4fb-4445-4919-972b-9ad16f442d83", routeValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseIsCollection: true };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} repositoryId
    * @param {string} sha1
    * @param {string} project - Project ID or project name
    * @param {string} projectId
    * @param {boolean} recursive
    * @param {string} fileName
    */
    getTree(repositoryId, sha1, project, projectId, recursive, fileName) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId,
                    sha1: sha1
                };
                let queryValues = {
                    projectId: projectId,
                    recursive: recursive,
                    fileName: fileName,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "729f6437-6f92-44ec-8bee-273a7111063c", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let res = yield this.restClient.get(url, apiVersion, null);
                    let serializationData = { responseTypeMetadata: GitInterfaces.TypeInfo.GitTreeRef, responseIsCollection: false };
                    let deserializedResult = serm.ContractSerializer.serialize(res.result, serializationData, true);
                    resolve(deserializedResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
    /**
    * @param {string} repositoryId
    * @param {string} sha1
    * @param {string} project - Project ID or project name
    * @param {string} projectId
    * @param {boolean} recursive
    * @param {string} fileName
    */
    getTreeZip(repositoryId, sha1, project, projectId, recursive, fileName) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                let onResult = (err, statusCode, Tree) => {
                    if (err) {
                        err.statusCode = statusCode;
                        reject(err);
                    }
                    else {
                        resolve(Tree);
                    }
                };
                let routeValues = {
                    project: project,
                    repositoryId: repositoryId,
                    sha1: sha1
                };
                let queryValues = {
                    projectId: projectId,
                    recursive: recursive,
                    fileName: fileName,
                };
                try {
                    let verData = yield this.vsoClient.getVersioningData("3.1-preview.1", "git", "729f6437-6f92-44ec-8bee-273a7111063c", routeValues, queryValues);
                    let url = verData.requestUrl;
                    let apiVersion = verData.apiVersion;
                    let accept = this.createAcceptHeader("application/zip", apiVersion);
                    this.httpClient.getStream(url, accept, onResult);
                }
                catch (err) {
                    reject(err);
                }
            }));
        });
    }
}
exports.GitApi = GitApi;
