"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAvailableKubectlVersions = exports.getKubeconfigForCluster = exports.createKubeconfig = exports.downloadKubectl = exports.getStableKubectlVersion = exports.stableKubectlVersion = void 0;
const os = require("os");
const path = require("path");
const toolLib = require("azure-pipelines-tool-lib/tool");
const tl = require("azure-pipelines-task-lib/task");
const downloadutility = require("./downloadutility");
const util = require("util");
const yaml = require("js-yaml");
const uuidV4 = require('uuid/v4');
const kubectlToolName = "kubectl";
exports.stableKubectlVersion = "v1.14.0";
const restutilities_1 = require("./restutilities");
var fs = require('fs');
// get a stable version from the url https://storage.googleapis.com/kubernetes-release/release/stable.txt
function getStableKubectlVersion() {
    return __awaiter(this, void 0, void 0, function* () {
        var version;
        var stableVersionUrl = "https://storage.googleapis.com/kubernetes-release/release/stable.txt";
        var downloadPath = path.join(getTempDirectory(), uuidV4() + ".txt");
        return downloadutility.download(stableVersionUrl, downloadPath, false, true).then((resolve) => {
            version = fs.readFileSync(downloadPath, "utf8").toString().trim();
            if (!version) {
                version = exports.stableKubectlVersion;
            }
            return version;
        }, (reject) => {
            tl.debug(reject);
            tl.warning(tl.loc('DownloadStableVersionFailed', stableVersionUrl, exports.stableKubectlVersion));
            return exports.stableKubectlVersion;
        });
    });
}
exports.getStableKubectlVersion = getStableKubectlVersion;
function downloadKubectl(version) {
    return __awaiter(this, void 0, void 0, function* () {
        var cachedToolpath = toolLib.findLocalTool(kubectlToolName, version);
        if (!cachedToolpath) {
            try {
                var KubectlDownloadPath = yield toolLib.downloadTool(getkubectlDownloadURL(version));
            }
            catch (exception) {
                throw new Error(tl.loc("DownloadKubectlFailedFromLocation", getkubectlDownloadURL(version), exception));
            }
            cachedToolpath = yield toolLib.cacheFile(KubectlDownloadPath, kubectlToolName + getExecutableExtention(), kubectlToolName, version);
        }
        var kubectlPath = path.join(cachedToolpath, kubectlToolName + getExecutableExtention());
        fs.chmodSync(kubectlPath, "777");
        return kubectlPath;
    });
}
exports.downloadKubectl = downloadKubectl;
function createKubeconfig(kubernetesServiceEndpoint) {
    var kubeconfigTemplateString = '{"apiVersion":"v1","kind":"Config","clusters":[{"cluster":{"certificate-authority-data": null,"server": null}}], "users":[{"user":{"token": null}}]}';
    var kubeconfigTemplate = JSON.parse(kubeconfigTemplateString);
    //populate server url, ca cert and token fields
    kubeconfigTemplate.clusters[0].cluster.server = tl.getEndpointUrl(kubernetesServiceEndpoint, false);
    kubeconfigTemplate.clusters[0].cluster["certificate-authority-data"] = tl.getEndpointAuthorizationParameter(kubernetesServiceEndpoint, 'serviceAccountCertificate', false);
    var base64ApiToken = Buffer.from(tl.getEndpointAuthorizationParameter(kubernetesServiceEndpoint, 'apiToken', false), 'base64');
    kubeconfigTemplate.users[0].user.token = base64ApiToken.toString();
    return JSON.stringify(kubeconfigTemplate);
}
exports.createKubeconfig = createKubeconfig;
function getTempDirectory() {
    return tl.getVariable('agent.tempDirectory') || os.tmpdir();
}
function getkubectlDownloadURL(version) {
    switch (os.type()) {
        case 'Linux':
            return util.format("https://storage.googleapis.com/kubernetes-release/release/%s/bin/linux/amd64/kubectl", version);
        case 'Darwin':
            return util.format("https://storage.googleapis.com/kubernetes-release/release/%s/bin/darwin/amd64/kubectl", version);
        default:
        case 'Windows_NT':
            return util.format("https://storage.googleapis.com/kubernetes-release/release/%s/bin/windows/amd64/kubectl.exe", version);
    }
}
function getKubeconfigForCluster(kubernetesServiceEndpoint) {
    var kubeconfig = tl.getEndpointAuthorizationParameter(kubernetesServiceEndpoint, 'kubeconfig', false);
    var clusterContext = tl.getEndpointAuthorizationParameter(kubernetesServiceEndpoint, 'clusterContext', true);
    if (!clusterContext) {
        return kubeconfig;
    }
    var kubeconfigTemplate = yaml.safeLoad(kubeconfig);
    kubeconfigTemplate["current-context"] = clusterContext;
    var modifiedKubeConfig = yaml.safeDump(kubeconfigTemplate);
    return modifiedKubeConfig.toString();
}
exports.getKubeconfigForCluster = getKubeconfigForCluster;
function getExecutableExtention() {
    if (os.type().match(/^Win/)) {
        return ".exe";
    }
    return "";
}
function getAvailableKubectlVersions() {
    return __awaiter(this, void 0, void 0, function* () {
        var request = new restutilities_1.WebRequest();
        request.method = "GET";
        let page_number = 0;
        let versions = [];
        const countPerPage = 100;
        while (true) {
            try {
                request.uri = `https://api.github.com/repos/kubernetes/kubernetes/releases?page=${page_number}&per_page=${countPerPage}`;
                var response = yield restutilities_1.sendRequest(request);
                // break if no more items or items are less then asked
                if (response.body.length === 0 || response.body.length < countPerPage) {
                    break;
                }
                response.body.forEach(release => {
                    if (release["tag_name"]) {
                        versions.push(release["tag_name"]);
                    }
                });
                page_number++;
            }
            catch (error) {
                throw error;
            }
        }
        return versions;
    });
}
exports.getAvailableKubectlVersions = getAvailableKubectlVersions;
