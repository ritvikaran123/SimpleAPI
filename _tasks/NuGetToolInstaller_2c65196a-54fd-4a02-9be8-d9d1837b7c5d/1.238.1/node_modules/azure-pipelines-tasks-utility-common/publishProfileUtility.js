"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSCMCredentialsFromPublishProfile = void 0;
var parseString = require('xml2js').parseString;
function getSCMCredentialsFromPublishProfile(publishProfileXml) {
    return __awaiter(this, void 0, void 0, function* () {
        let res;
        yield parseString(publishProfileXml, (error, result) => {
            if (!!error) {
                throw new Error("Failed publish profile XML parsing " + error);
            }
            try {
                res = result.publishData.publishProfile[0].$;
            }
            catch (error) {
                throw new Error("Invalid publish profile: " + error);
            }
        });
        let credentials = {
            scmUri: res.publishUrl.split(":")[0],
            username: res.userName,
            password: res.userPWD,
            applicationUrl: res.destinationAppUrl
        };
        console.log(`${credentials.username}`);
        console.log(`${credentials.scmUri}`);
        if (credentials.scmUri.indexOf("scm") < 0) {
            throw new Error("Publish profile does not contain kudu URL");
        }
        credentials.scmUri = `https://${credentials.scmUri}`;
        this.applicationURL = res.destinationAppUrl;
        return credentials;
    });
}
exports.getSCMCredentialsFromPublishProfile = getSCMCredentialsFromPublishProfile;
