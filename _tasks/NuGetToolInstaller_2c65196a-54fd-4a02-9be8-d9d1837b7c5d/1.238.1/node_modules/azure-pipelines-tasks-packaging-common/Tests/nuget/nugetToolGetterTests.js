"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.nugettoolgetter = void 0;
const mockery = require("mockery");
const assert = require("assert");
const VersionInfoVersion_1 = require("../../pe-parser/VersionInfoVersion");
function nugettoolgetter() {
    let mockTask = {
        which: function () {
            return "C:/fakePath";
        },
        getHttpProxyConfiguration: function () {
            return null;
        },
        getHttpCertConfiguration: function () {
            return null;
        },
        setResourcePath: function () {
            return null;
        },
        debug(message) { },
        loc(message) { return message; },
        getVariable: function () {
            return null;
        },
        tool: function () {
            return null;
        }
    };
    before(() => {
        mockery.disable(); // needed to ensure that we can mock vsts-task-lib/task
        mockery.enable({
            useCleanCache: true,
            warnOnUnregistered: false
        });
    });
    after(() => {
        mockery.disable();
    });
    beforeEach(() => {
        mockery.resetCache();
        mockery.registerMock('azure-pipelines-task-lib/task', mockTask);
    });
    afterEach(() => {
        mockery.deregisterAll();
    });
    it("Resolve correct nuget version based on msbuild 15", () => __awaiter(this, void 0, void 0, function* () {
        mockery.registerMock('../pe-parser', {
            getFileVersionInfoAsync: function (msbuildPath) {
                let result = { strings: {} };
                result.fileVersion = new VersionInfoVersion_1.default(15, 0, 0, 0);
                result.productVersion = new VersionInfoVersion_1.default(15, 0, 0, 0);
                result.strings['ProductVersion'] = "15.0.0.0";
                return result;
            }
        });
        let ngToolGetterMock = require("../../nuget/NuGetToolGetter");
        let msbuildVersion = yield ngToolGetterMock.getMSBuildVersionString();
        assert.equal(msbuildVersion, "15.0.0.0");
        let nugetVersion = yield ngToolGetterMock.resolveNuGetVersion();
        assert.equal(nugetVersion, "4.9.6");
    }));
    it("Resolve correct nuget version based on msbuild 16.12", () => __awaiter(this, void 0, void 0, function* () {
        mockery.registerMock('../pe-parser', {
            getFileVersionInfoAsync: function (msbuildPath) {
                let result = { strings: {} };
                result.fileVersion = new VersionInfoVersion_1.default(16, 12, 0, 0);
                result.productVersion = new VersionInfoVersion_1.default(16, 12, 0, 0);
                result.strings['ProductVersion'] = "16.12.0.0";
                return result;
            }
        });
        let ngToolGetterMock = require("../../nuget/NuGetToolGetter");
        let msbuildVersion = yield ngToolGetterMock.getMSBuildVersionString();
        assert.equal(msbuildVersion, "16.12.0.0");
        let nugetVersion = yield ngToolGetterMock.resolveNuGetVersion();
        assert.equal(nugetVersion, "5.9.3");
    }));
    it("Resolve correct nuget version based on msbuild 17.1", () => __awaiter(this, void 0, void 0, function* () {
        mockery.registerMock('../pe-parser', {
            getFileVersionInfoAsync: function (msbuildPath) {
                let result = { strings: {} };
                result.fileVersion = new VersionInfoVersion_1.default(17, 1, 0, 0);
                result.productVersion = new VersionInfoVersion_1.default(17, 1, 0, 0);
                result.strings['ProductVersion'] = "17.1.0.0";
                return result;
            }
        });
        let ngToolGetterMock = require("../../nuget/NuGetToolGetter");
        let msbuildVersion = yield ngToolGetterMock.getMSBuildVersionString();
        assert.equal(msbuildVersion, "17.1.0.0");
        let nugetVersion = yield ngToolGetterMock.resolveNuGetVersion();
        assert.equal(nugetVersion, "6.4.0");
    }));
}
exports.nugettoolgetter = nugettoolgetter;
