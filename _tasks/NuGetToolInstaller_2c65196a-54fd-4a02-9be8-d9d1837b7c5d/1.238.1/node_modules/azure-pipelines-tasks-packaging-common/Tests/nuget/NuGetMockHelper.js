"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerNugetUtilityMockUnix = exports.registerNugetUtilityMock = exports.registerNugetToolGetterMockUnix = exports.registerNugetToolGetterMock = void 0;
function registerNugetToolGetterMock(tmr) {
    tmr.registerMock('azure-pipelines-tasks-packaging-common/nuget/NuGetToolGetter', {
        getNuGet: function (versionSpec) {
            return "c:\\from\\tool\\installer\\nuget.exe";
        },
        cacheBundledNuGet: function (version, path) {
            return version;
        },
        getMSBuildVersionString: function () {
            return "1.0.0.0";
        },
        FORCE_NUGET_4_0_0: 'FORCE_NUGET_4_0_0',
        NUGET_VERSION_4_0_0: '4.0.0',
        NUGET_VERSION_4_0_0_PATH_SUFFIX: 'NuGet/4.0.0/',
        DEFAULT_NUGET_VERSION: '4.9.6',
        DEFAULT_NUGET_PATH_SUFFIX: 'NuGet/4.9.6/',
        NUGET_EXE_TOOL_PATH_ENV_VAR: "NuGetExeToolPath"
    });
}
exports.registerNugetToolGetterMock = registerNugetToolGetterMock;
function registerNugetToolGetterMockUnix(tmr) {
    tmr.registerMock('azure-pipelines-tasks-packaging-common/nuget/NuGetToolGetter', {
        getNuGet: function (versionSpec) {
            return '~/myagent/_work/_tasks/NuGet/nuget.exe';
        },
        cacheBundledNuGet: function (version, path) {
            return version;
        },
        getMSBuildVersionString: function () {
            return "1.0.0.0";
        },
        FORCE_NUGET_4_0_0: 'FORCE_NUGET_4_0_0',
        NUGET_VERSION_4_0_0: '4.0.0',
        NUGET_VERSION_4_0_0_PATH_SUFFIX: 'NuGet/4.0.0/',
        DEFAULT_NUGET_VERSION: '4.9.6',
        DEFAULT_NUGET_PATH_SUFFIX: 'NuGet/4.9.6/',
        NUGET_EXE_TOOL_PATH_ENV_VAR: "NuGetExeToolPath"
    });
}
exports.registerNugetToolGetterMockUnix = registerNugetToolGetterMockUnix;
function registerNugetUtilityMock(tmr, projectFile) {
    tmr.registerMock('azure-pipelines-tasks-packaging-common/nuget/Utility', {
        getPatternsArrayFromInput: function (input) {
            return [input];
        },
        resolveFilterSpec: function (filterSpec, basePath, allowEmptyMatch) {
            return projectFile;
        },
        stripLeadingAndTrailingQuotes: function (path) {
            return path;
        },
        locateCredentialProvider: function (path) {
            return 'c:\\agent\\home\\directory\\externals\\nuget\\CredentialProvider';
        },
        setConsoleCodePage: function () {
            var tlm = require('azure-pipelines-task-lib/mock-task');
            tlm.debug(`setting console code page`);
        },
        getNuGetFeedRegistryUrl(packagingCollectionUrl, feedId, project, nuGetVersion, accessToken) {
            if (project) {
                return 'https://vsts/' + project + '/packagesource';
            }
            return 'https://vsts/packagesource';
        }
    });
    tmr.registerMock('./Utility', {
        resolveToolPath: function (path) {
            return path;
        }
    });
}
exports.registerNugetUtilityMock = registerNugetUtilityMock;
function registerNugetUtilityMockUnix(tmr, projectFile) {
    tmr.registerMock('azure-pipelines-tasks-packaging-common/nuget/Utility', {
        getPatternsArrayFromInput: function (input) {
            return [input];
        },
        resolveFilterSpec: function (filterSpec, basePath, allowEmptyMatch) {
            return projectFile;
        },
        resolveToolPath: function (path) {
            return path;
        },
        locateCredentialProvider: function (path) {
            return '~/myagent/_work/_tasks/NuGet/CredentialProvider';
        },
        setConsoleCodePage: function () {
            var tlm = require('azure-pipelines-task-lib/mock-task');
            tlm.debug(`setting console code page`);
        },
        getNuGetFeedRegistryUrl(packagingCollectionUrl, feedId, project, nuGetVersion, accessToken) {
            return 'https://vsts/packagesource';
        }
    });
    tmr.registerMock('./Utility', {
        resolveToolPath: function (path) {
            return path;
        }
    });
}
exports.registerNugetUtilityMockUnix = registerNugetUtilityMockUnix;
