"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.registerClientToolRunnerMock = exports.registerClientToolUtilitiesMock = void 0;
function registerClientToolUtilitiesMock(tmr, toolPath) {
    tmr.registerMock('azure-pipelines-tasks-packaging-common/universal/ClientToolUtilities', {
        getClientToolFromService: function (serviceUri, accessToken, toolName) {
            return toolPath;
        },
        getBlobstoreUriFromBaseServiceUri: function (serviceUri, accesstoken) {
            return serviceUri + "/blobstore";
        },
        getWebApiWithProxy: function (serviceUri, accessToken) {
            return {
                vsoClient: {
                    getVersioningData: function (ApiVersion, PackagingAreaName, PackageAreaId, Obj) {
                        return __awaiter(this, void 0, void 0, function* () {
                            return { requestUrl: 'foobar' };
                        });
                    }
                }
            };
        },
        getSystemAccessToken: function () {
            return "token";
        },
        retryOnExceptionHelper: function (action, maxTries, retryIntervalInMilliseconds) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield action();
            });
        },
        retryOnNullOrExceptionHelper: function (action, maxTries, retryIntervalInMilliseconds) {
            return __awaiter(this, void 0, void 0, function* () {
                return yield action();
            });
        },
        trimEnd: function (data, trimChar) {
            return data;
        }
    });
}
exports.registerClientToolUtilitiesMock = registerClientToolUtilitiesMock;
function registerClientToolRunnerMock(tmr) {
    var mtt = require('azure-pipelines-task-lib/mock-toolrunner');
    tmr.registerMock('azure-pipelines-tasks-packaging-common/universal/ClientToolRunner', {
        getClientToolOptions: function () {
            return {
                cwd: process.cwd(),
                env: Object.assign({}, process.env),
                silent: false,
                failOnStdErr: false,
                ignoreReturnCode: false,
                windowsVerbatimArguments: false
            };
        },
        runClientTool: function (clientToolPath, command, execOptions) {
            var tr = new mtt.ToolRunner(clientToolPath);
            tr.arg(command);
            return tr.execSync(execOptions);
        }
    });
}
exports.registerClientToolRunnerMock = registerClientToolRunnerMock;
