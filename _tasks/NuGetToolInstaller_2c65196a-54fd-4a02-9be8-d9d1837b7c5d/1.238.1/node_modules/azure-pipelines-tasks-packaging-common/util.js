"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.logError = exports.LogType = exports.getProjectAndFeedIdFromInput = exports.getProjectAndFeedIdFromInputParam = exports.toNerfDart = exports.restoreFileWithName = exports.restoreFile = exports.saveFileWithName = exports.saveFile = exports.getTempPath = void 0;
const fs = require("fs");
const path = require("path");
const url = require("url");
const tl = require("azure-pipelines-task-lib/task");
function getTempPath() {
    const tempNpmrcDir = tl.getVariable('Agent.BuildDirectory')
        || tl.getVariable('Agent.TempDirectory');
    const tempPath = path.join(tempNpmrcDir, 'npm');
    if (tl.exist(tempPath) === false) {
        tl.mkdirP(tempPath);
    }
    return tempPath;
}
exports.getTempPath = getTempPath;
function copyFile(src, dst) {
    const content = fs.readFileSync(src);
    fs.writeFileSync(dst, content);
}
function saveFile(file) {
    if (file && tl.exist(file)) {
        const tempPath = getTempPath();
        const baseName = path.basename(file);
        const destination = path.join(tempPath, baseName);
        tl.debug(tl.loc('SavingFile', file));
        copyFile(file, destination);
    }
}
exports.saveFile = saveFile;
function saveFileWithName(file, name, filePath) {
    if (file && tl.exist(file)) {
        const destination = path.join(filePath, name + '.npmrc');
        tl.debug(tl.loc('SavingFile', file));
        copyFile(file, destination);
    }
}
exports.saveFileWithName = saveFileWithName;
function restoreFile(file) {
    if (file) {
        const tempPath = getTempPath();
        const baseName = path.basename(file);
        const source = path.join(tempPath, baseName);
        if (tl.exist(source)) {
            tl.debug(tl.loc('RestoringFile', file));
            copyFile(source, file);
            tl.rmRF(source);
        }
    }
}
exports.restoreFile = restoreFile;
function restoreFileWithName(file, name, filePath) {
    if (file) {
        const source = path.join(filePath, name + '.npmrc');
        if (tl.exist(source)) {
            tl.debug(tl.loc('RestoringFile', file));
            copyFile(source, file);
            tl.rmRF(source);
        }
    }
}
exports.restoreFileWithName = restoreFileWithName;
function toNerfDart(uri) {
    var parsed = url.parse(uri);
    delete parsed.protocol;
    delete parsed.auth;
    delete parsed.query;
    delete parsed.search;
    delete parsed.hash;
    return url.resolve(url.format(parsed), '.');
}
exports.toNerfDart = toNerfDart;
function getProjectAndFeedIdFromInputParam(inputParam) {
    const feedProject = tl.getInput(inputParam);
    return getProjectAndFeedIdFromInput(feedProject);
}
exports.getProjectAndFeedIdFromInputParam = getProjectAndFeedIdFromInputParam;
function getProjectAndFeedIdFromInput(feedProject) {
    let projectId = null;
    let feedId = feedProject;
    if (feedProject && feedProject.includes("/")) {
        const feedProjectParts = feedProject.split("/");
        projectId = feedProjectParts[0] || null;
        feedId = feedProjectParts[1];
    }
    return {
        feedId: feedId,
        projectId: projectId
    };
}
exports.getProjectAndFeedIdFromInput = getProjectAndFeedIdFromInput;
var LogType;
(function (LogType) {
    LogType[LogType["debug"] = 0] = "debug";
    LogType[LogType["warning"] = 1] = "warning";
    LogType[LogType["error"] = 2] = "error";
})(LogType = exports.LogType || (exports.LogType = {}));
function log(message, logType) {
    if (logType === LogType.warning) {
        tl.warning(message);
    }
    else if (logType === LogType.error) {
        tl.error(message);
    }
    else {
        tl.debug(message);
    }
}
/**
 * Logs the error instead of throwing.
 */
function logError(error, logType = LogType.debug) {
    if (error instanceof Error) {
        if (error.message) {
            log(error.message, logType);
        }
        if (error.stack) {
            log(error.stack, LogType.debug);
        } // Log stack always as debug
    }
    else {
        log(`Error: ${error}`, logType);
    }
}
exports.logError = logError;
