/// <reference types="q" />
import { IExecOptions, IExecSyncResult, ToolRunner } from "azure-pipelines-task-lib/toolrunner";
import * as auth from "./Authentication";
import { NuGetQuirks } from "./NuGetQuirks";
export interface NuGetEnvironmentSettings {
    authInfo: auth.NuGetAuthInfo;
    credProviderFolder: string;
    extensionsDisabled: boolean;
}
export declare class NuGetToolRunner extends ToolRunner {
    private settings;
    constructor(nuGetExePath: string, settings: NuGetEnvironmentSettings);
    execSync(options?: IExecOptions): IExecSyncResult;
    exec(options?: IExecOptions): Q.Promise<number>;
}
export declare function createNuGetToolRunner(nuGetExePath: string, settings: NuGetEnvironmentSettings): NuGetToolRunner;
export interface LocateOptions {
    /** if true, search along the system path in addition to the hard-coded NuGet tool paths */
    fallbackToSystemPath?: boolean;
    /** Array of filenames to use when searching for the tool. Defaults to the tool name. */
    toolFilenames?: string[];
    /** Array of paths to search under. Defaults to agent NuGet locations */
    searchPath?: string[];
    /** root that searchPaths are relative to. Defaults to the Agent.HomeDirectory build variable */
    root?: string;
}
export declare function locateTool(tool: string, opts?: LocateOptions): string;
export declare function locateNuGetExe(userNuGetExePath: string): string;
export declare function getNuGetQuirksAsync(nuGetExePath: string): Promise<NuGetQuirks>;
export declare function isCredentialProviderEnabled(quirks: NuGetQuirks): boolean;
export declare function isCredentialConfigEnabled(quirks: NuGetQuirks): boolean;
export declare function getNuGetProxyFromEnvironment(): string;
